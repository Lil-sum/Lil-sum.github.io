<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>github注册教程</title>
    <url>/2020/06/18/github%E6%B3%A8%E5%86%8C%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>GitHub 是一个面向开源及私有软件项目的托管平台，因为只支持 Git 作为唯一的版本库格式进行托管，故名 GitHub。<br>GitHub 于 2008 年 4 月 10 日正式上线，除了 Git 代码仓库托管及基本的 Web 管理界面以外，还提供了订阅、讨论组、文本渲染、在线文件编辑器、协作图谱（报表）、代码片段分享（Gist）等功能。</p>
<p>想要成为一个合格的程序员必须要掌握 GitHub 的用法！</p>
<p>由于github是半墙状态，有条件的可以开ssh，科学上网<br>优先推荐使用chrome（谷歌浏览器）或者微软edge浏览器</p>
<h3 id="注册github流程"><a href="#注册github流程" class="headerlink" title="注册github流程"></a>注册github流程</h3><p>1.首先进入github官网 <a href="https://github.com/">https://github.com/</a></p>
<p><img src="/github%E6%B3%A8%E5%86%8C%E6%95%99%E7%A8%8B/1.png"></p>
<p>2.点击绿色框Sign up for GitHub进行注册<br>注意：<br>Sign in，登录<br>Sign up，注册</p>
<p><img src="/github%E6%B3%A8%E5%86%8C%E6%95%99%E7%A8%8B/2.png"></p>
<p>3.注册页面第一栏email（邮箱），第二栏password（密码），第三栏username（用户名）</p>
<p>进行验证后即可完成注册</p>
<h3 id="ps："><a href="#ps：" class="headerlink" title="ps："></a>ps：</h3><h3 id="资料参考于课本和讲解"><a href="#资料参考于课本和讲解" class="headerlink" title="资料参考于课本和讲解"></a>资料参考于课本和讲解</h3><h3 id="转载请注明出处https-lil-sum-github-io-，-感谢配合"><a href="#转载请注明出处https-lil-sum-github-io-，-感谢配合" class="headerlink" title="转载请注明出处https://lil-sum.github.io/， 感谢配合."></a>转载请注明出处<a href="https://lil-sum.github.io/%EF%BC%8C">https://lil-sum.github.io/，</a> 感谢配合.</h3>]]></content>
      <tags>
        <tag>教程类</tag>
      </tags>
  </entry>
  <entry>
    <title>关于数据库</title>
    <url>/2021/06/18/%E5%85%B3%E4%BA%8E%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h2 id="数据库介绍"><a href="#数据库介绍" class="headerlink" title="数据库介绍"></a>数据库介绍</h2><h3 id="数据库管理系统DBMS"><a href="#数据库管理系统DBMS" class="headerlink" title="数据库管理系统DBMS"></a>数据库管理系统DBMS</h3><ul>
<li>是一种操纵和管理数据库的大型软件，用于建立、使用和维护数据库，简称DBMS。<br>它对数据库进行统一的管理和控制，以保证数据库的安全性和完整性。<br>用户通过DBMS访问数据库中的数据，数据库管理员也通过dbms进行数据库的维护工作。<br>数据库管理系统是数据库系统的核心，是管理数据库的软件。<br>我们一般说的数据库,就是指的DBMS: 数据库管理系统</li>
</ul>
<h3 id="常见的数据库"><a href="#常见的数据库" class="headerlink" title="常见的数据库"></a>常见的数据库</h3><ul>
<li><p>Oracle</p>
<ul>
<li>运行稳定，可移植性高，功能齐全，性能超群！适用于大型企业领域。</li>
</ul>
</li>
<li><p>DB2</p>
<ul>
<li>速度快、可靠性好，适于海量数据，恢复性极强。适用于大中型企业领域。</li>
</ul>
</li>
<li><p>MySQL</p>
<ul>
<li>开源，跨平台、体积小，速度快。适用于于中小型企业领域。</li>
</ul>
</li>
<li><p>SQL Server</p>
<ul>
<li>全面，效率高，界面友好，操作容易，但是不跨平台。适用于于中小型企业领域。</li>
</ul>
</li>
</ul>
<h3 id="结构化查询语言SQL"><a href="#结构化查询语言SQL" class="headerlink" title="结构化查询语言SQL"></a>结构化查询语言SQL</h3><ul>
<li>SQL语言的功能包括查询、操纵、定义和控制，是一个综合的、通用的关系数据库语言，同时又是一种高度非过程化的语言，只要求用户指出做什么而不需要指出怎么做。</li>
</ul>
<h3 id="非关系型数据库NoSql"><a href="#非关系型数据库NoSql" class="headerlink" title="非关系型数据库NoSql"></a>非关系型数据库NoSql</h3><ul>
<li>MongoDB,Redis,HBase…</li>
</ul>
<h2 id="RDBMS专业术语"><a href="#RDBMS专业术语" class="headerlink" title="RDBMS专业术语"></a>RDBMS专业术语</h2><h3 id="表"><a href="#表" class="headerlink" title="表"></a>表</h3><ul>
<li>具有固定的列数,和任意的行数</li>
</ul>
<h3 id="数据库-1"><a href="#数据库-1" class="headerlink" title="数据库"></a>数据库</h3><ul>
<li>数据库是一些关联表的集合</li>
</ul>
<h3 id="列"><a href="#列" class="headerlink" title="列"></a>列</h3><ul>
<li>一个数据项 Field   字段</li>
</ul>
<h3 id="行"><a href="#行" class="headerlink" title="行"></a>行</h3><ul>
<li>一条记录  row</li>
</ul>
<h3 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h3><ul>
<li>主键是唯一的。一个数据表中只能包含一个主键。你可以使用主键来查询数据。</li>
</ul>
<h3 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h3><ul>
<li>外键用于关联两个表</li>
</ul>
<h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><ul>
<li>使用索引可快速访问数据库表中的特定信息。索引是对数据库表中一列或多列的值进行排序的一种结构。类似于书籍的目录。</li>
</ul>
<h2 id="MySql数据库"><a href="#MySql数据库" class="headerlink" title="MySql数据库"></a>MySql数据库</h2><h3 id="MySql介绍"><a href="#MySql介绍" class="headerlink" title="MySql介绍"></a>MySql介绍</h3><ul>
<li>MySQL是一个关系型数据库管理系统，由瑞典MySQL AB公司开发，目前属于Oracle公司。MySQL是一种关系数据库管理系统，关系数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。</li>
<li>Mysql是开源的，所以你不需要支付额外的费用。</li>
<li>Mysql支持大型的数据库。可以处理拥有上千万条记录的大型数据库。</li>
<li>MySQL使用标准的SQL数据语言形式。</li>
<li>Mysql可以安装在多个系统上，并且支持多种语言。这些编程语言包括C、C++、Python、Java、Perl、PHP、Eiffel、Ruby和Tcl等。</li>
</ul>
<h3 id="MySql安装"><a href="#MySql安装" class="headerlink" title="MySql安装"></a>MySql安装</h3><ul>
<li>windows安装</li>
<li>Mac安装</li>
</ul>
<h3 id="MySql的存储引擎"><a href="#MySql的存储引擎" class="headerlink" title="MySql的存储引擎"></a>MySql的存储引擎</h3><ul>
<li><p>什么是存储引擎</p>
<ul>
<li>MySQL中的数据用各种不同的技术存储在文件（或者内存）中。这些技术中的每一种技术都使用不同的存储机制、索引技巧、锁定水平并且最终提供广泛的不同的功能和能力。通过选择不同的技术，你能够获得额外的速度或者功能，从而改善你的应用的整体功能。</li>
<li>不同的存储引擎性能是不一样的</li>
</ul>
</li>
<li><p>什么是事务</p>
<ul>
<li>是指作为单个逻辑工作单元执行的一系列操作，要么完全地执行，要么完全地不执行。</li>
</ul>
</li>
<li><p>存储引擎分类</p>
<ul>
<li><p>MYISAM</p>
<ul>
<li><p>它不支持事务，也不支持外键，尤其是访问速度快，对事务完整性没有要求或者以SELECT、INSERT为主的应用基本都可以使用这个引擎来创建表。</p>
</li>
<li><p>每个MyISAM在磁盘上存储成3个文件，其中文件名和表名都相同，但是扩展名分别为：</p>
<ul>
<li>.frm(存储表定义)</li>
<li>MYD(MYData，存储数据)</li>
<li>MYI(MYIndex，存储索引)</li>
</ul>
</li>
</ul>
</li>
<li><p>INNODB</p>
<ul>
<li>InnoDB存储引擎提供了具有提交、回滚和崩溃恢复能力的事务安全。但是对比MyISAM的存储引擎，InnoDB写的处理效率差一些并且会占用更多的磁盘空间以保留数据和索引。</li>
</ul>
</li>
<li><p>MEMORY</p>
<ul>
<li>memory使用存在内存中的内容来创建表。每个MEMORY表实际对应一个磁盘文件，格式是.frm</li>
<li>MEMORY类型的表访问非常快，因为它到数据是放在内存中的，并且默认使用HASH索引，但是一旦服务器关闭，表中的数据就会丢失，但表还会继续存在。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="常用数据库命令"><a href="#常用数据库命令" class="headerlink" title="常用数据库命令"></a>常用数据库命令</h2><h3 id="MySql数据库分为两种"><a href="#MySql数据库分为两种" class="headerlink" title="MySql数据库分为两种"></a>MySql数据库分为两种</h3><ul>
<li><p>系统数据库(数据库服务器自带的,自带的4个)</p>
<ul>
<li><p>information_schema</p>
<ul>
<li>存储数据库对象信息</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>如用户表信息,列信息,根除,字符,分区<br>里面的内容我们不能动.</p>
<pre><code>- performance_schema

    - 存储数据库服务器性能参数信息

- mysql

    - 存储数据库用户权限信息

- test

    - 一个空的数据库，用户可以使用它也可以不使用它
</code></pre>
<ul>
<li><p>用户数据库</p>
<ul>
<li>用户自己创建的数据库,一个项目用一个数据库</li>
</ul>
</li>
</ul>
<h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><ul>
<li>create database 数据库名称;</li>
</ul>
<h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><ul>
<li>drop database 数据库名称;</li>
</ul>
<h3 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h3><ul>
<li>show databases;</li>
</ul>
<h3 id="使用数据库"><a href="#使用数据库" class="headerlink" title="使用数据库"></a>使用数据库</h3><ul>
<li>use 数据库名;</li>
</ul>
<h3 id="查看数据库当中有多少张表"><a href="#查看数据库当中有多少张表" class="headerlink" title="查看数据库当中有多少张表"></a>查看数据库当中有多少张表</h3><ul>
<li>show  tables;</li>
</ul>
<h3 id="请注意写的顺序-先使用数据库-再去查有多少张表"><a href="#请注意写的顺序-先使用数据库-再去查有多少张表" class="headerlink" title="请注意写的顺序,先使用数据库,再去查有多少张表"></a>请注意写的顺序,先使用数据库,再去查有多少张表</h3><h3 id="ps："><a href="#ps：" class="headerlink" title="ps："></a>ps：</h3><h3 id="资料参考于课本和讲解"><a href="#资料参考于课本和讲解" class="headerlink" title="资料参考于课本和讲解"></a>资料参考于课本和讲解</h3><h3 id="转载请注明出处https-lil-sum-github-io-，-感谢配合"><a href="#转载请注明出处https-lil-sum-github-io-，-感谢配合" class="headerlink" title="转载请注明出处https://lil-sum.github.io/， 感谢配合."></a>转载请注明出处<a href="https://lil-sum.github.io/%EF%BC%8C">https://lil-sum.github.io/，</a> 感谢配合.</h3>]]></content>
      <tags>
        <tag>术语定义类</tag>
      </tags>
  </entry>
  <entry>
    <title>关于SQL语言</title>
    <url>/2021/09/17/%E5%85%B3%E4%BA%8ESQL%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<h1 id="SQL语言"><a href="#SQL语言" class="headerlink" title="SQL语言"></a>SQL语言</h1><h2 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h2><h3 id="字符集的由来"><a href="#字符集的由来" class="headerlink" title="字符集的由来"></a>字符集的由来</h3><ul>
<li>计算机只能识别二进制代码无论是计算机程序还是数据，最终都会转换成二进制，计算机才能认识。</li>
<li>为了计算机不只能做科学计算，也能处理文字信息。<br>人们想出了给每一个文字符号编码以便于计算识别处理的办法，这就是计算机字符集的由来。</li>
</ul>
<h3 id="ASSCII"><a href="#ASSCII" class="headerlink" title="ASSCII"></a>ASSCII</h3><ul>
<li><p>一套文字符号及其编码,比较规则 的集合。</p>
<ul>
<li>20世纪60年代初。美国标准化组织ANSI发布了第一个字符集。ASCII</li>
<li>后来又进一步变成了国际标准ISO-646</li>
</ul>
</li>
<li><p>各大字符集</p>
<ul>
<li><p>自ASCII后。为了处理不同的文字。各大计算机公司，各国，标准化政府，组织先后发明了几百种字符集。</p>
<ul>
<li>ISO-8859</li>
<li>GB2312-80</li>
<li>GBK</li>
<li>BIG5</li>
</ul>
</li>
<li><p>这些五花八门的字符集从收录的字符集到编码规则各不相同。给计算机软件开发和移值带来了很大的困难。</p>
</li>
</ul>
</li>
</ul>
<p>一个软件要在使用不同文字的国家和地区发布，必须得要做本地化开发。<br>    - 基于这个原因，要统一字符编码。</p>
<h3 id="unicode"><a href="#unicode" class="headerlink" title="unicode"></a>unicode</h3><ul>
<li>为了统一字符编码。国际标准化组织ISO的一些成员国于1984年发起制定了新的国际字符集标准。容纳全世界各种语言，文字，和  符号。最后产生了这个标准ISO-10646</li>
<li>ISO-10646发布后，遭到了美国计算机公司的反对。</li>
<li>1988年，Xerox公司提议制定了新的以16位编码人统一字符集。并联合了Apple,IBM,SUN，Microsoft等公司成立了Unicode技术委员会。专门负责收集，整理，和编码。于1991年推出了Unicode1.0</li>
<li>针对字符编码统一问题，ISO和Unicode协会推出了各自不同的标准。这显然是不利的。后来双方开始谈判。1991年10月达成协议。ISO将Unicode收编。起了个名BMP</li>
</ul>
<h3 id="UTF-16"><a href="#UTF-16" class="headerlink" title="UTF-16"></a>UTF-16</h3><ul>
<li>ISO-10646编码空间足以容纳从古自今使用过的文字和字符。但很多文字字符已经很少用了。<br>超过99%的在用文字字符都编入了BMP.因此，绝大部分情况下，Unicode双字节方式都能满足需求。<br>而且比双字节编码方式4字节原始编码来说，更节省内存和处理时间 。这也是Unicode流行的原因。</li>
<li>万一使用了BMP以外的文字怎么办？<br>Unicode提出了UTF-16的解决办法。</li>
</ul>
<h3 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h3><ul>
<li>虽然UTF-16解决了上面问题。但当时的计算机和网络世界还是ASCII的天下。只能处理单字节数据流。UTF-16离开了Unicode环境后。在传输和处理中，都存在问题。</li>
<li>于是又提出了UTF-8的解决文案，</li>
<li>UTF-8按一定的规则，将一个ISO10646或Unicode转换成1至4个字节的编码</li>
<li>其中ASCII转成单字节编码。也就严格兼容了ASCII字符集。</li>
<li>UTF-8的2，3，4字节用以转换ISO-10646标准的UCS-4原始码。</li>
</ul>
<h3 id="汉字的一些常见字符集"><a href="#汉字的一些常见字符集" class="headerlink" title="汉字的一些常见字符集"></a>汉字的一些常见字符集</h3><ul>
<li>GB2312</li>
<li>GB13000</li>
<li>GBK</li>
<li>GB18030</li>
</ul>
<h2 id="MySql存储引擎"><a href="#MySql存储引擎" class="headerlink" title="MySql存储引擎"></a>MySql存储引擎</h2><h3 id="数据库对象"><a href="#数据库对象" class="headerlink" title="数据库对象"></a>数据库对象</h3><ul>
<li>存储，管理和使用数据的不同结构形式，如：表、视图、存储过程、函数、触发器、事件等。</li>
</ul>
<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><ul>
<li>存储数据库对象的容器。</li>
</ul>
<h3 id="什么是存储引擎"><a href="#什么是存储引擎" class="headerlink" title="什么是存储引擎"></a>什么是存储引擎</h3><ul>
<li>MySQL中的数据用各种不同的技术存储在文件（或者内存）中。</li>
<li>每一种技术都使用不同的存储机制、索引技巧、锁定水平并且最终提供广泛的不同的功能和能力。</li>
<li>通过选择不同的技术，你能够获得额外的速度或者功能，从而改善你的应用的整体功能。</li>
<li>不同的存储引擎性能是不一样的</li>
</ul>
<h3 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h3><ul>
<li>是指作为单个逻辑工作单元执行的一系列操作，要么完全地执行，要么完全地不执行。</li>
</ul>
<h3 id="存储引擎分类"><a href="#存储引擎分类" class="headerlink" title="存储引擎分类"></a>存储引擎分类</h3><ul>
<li><p>MYISAM</p>
<ul>
<li><p>它不支持事务，也不支持外键，尤其是访问速度快，对事务完整性没有要求或者以SELECT、INSERT为主的应用基本都可以使用这个引擎来创建表。</p>
</li>
<li><p>每个MyISAM在磁盘上存储成3个文件，其中文件名和表名都相同，但是扩展名分别为：</p>
<ul>
<li>.frm(存储表定义)</li>
<li>MYD(MYData，存储数据)</li>
<li>MYI(MYIndex，存储索引)</li>
</ul>
</li>
</ul>
</li>
<li><p>INNODB</p>
<ul>
<li>InnoDB存储引擎提供了具有提交、回滚和崩溃恢复能力的事务安全。但是对比MyISAM的存储引擎，InnoDB写的处理效率差一些并且会占用更多的磁盘空间以保留数据和索引。</li>
</ul>
</li>
<li><p>MEMORY</p>
<ul>
<li>memory使用存在内存中的内容来创建表。每个MEMORY表实际对应一个磁盘文件，格式是.frm</li>
<li>MEMORY类型的表访问非常快，因为它到数据是放在内存中的，并且默认使用HASH索引，但是一旦服务器关闭，表中的数据就会丢失，但表还会继续存在。</li>
</ul>
</li>
</ul>
<h2 id="什么是SQL"><a href="#什么是SQL" class="headerlink" title="什么是SQL"></a>什么是SQL</h2><h3 id="SQL是Structured-Quevy-Language-结构化查询语言-的缩写。"><a href="#SQL是Structured-Quevy-Language-结构化查询语言-的缩写。" class="headerlink" title="SQL是Structured Quevy Language(结构化查询语言)的缩写。"></a>SQL是Structured Quevy Language(结构化查询语言)的缩写。</h3><h3 id="SQL是专为数据库而建立的操作命令集，是一种功能齐全的数据库语言。"><a href="#SQL是专为数据库而建立的操作命令集，是一种功能齐全的数据库语言。" class="headerlink" title="SQL是专为数据库而建立的操作命令集，是一种功能齐全的数据库语言。"></a>SQL是专为数据库而建立的操作命令集，是一种功能齐全的数据库语言。</h3><h3 id="在使用它时，只需要发出“做什么”的命令，“怎么做”是不用使用者考虑的。"><a href="#在使用它时，只需要发出“做什么”的命令，“怎么做”是不用使用者考虑的。" class="headerlink" title="在使用它时，只需要发出“做什么”的命令，“怎么做”是不用使用者考虑的。"></a>在使用它时，只需要发出“做什么”的命令，“怎么做”是不用使用者考虑的。</h3><h3 id="SQL语言功能很强，其核心功能只用了6个命令，分别是SELECT、CREATE、INSERT、DELETE、UPDATE、和GRANT-REVOKE-。"><a href="#SQL语言功能很强，其核心功能只用了6个命令，分别是SELECT、CREATE、INSERT、DELETE、UPDATE、和GRANT-REVOKE-。" class="headerlink" title="SQL语言功能很强，其核心功能只用了6个命令，分别是SELECT、CREATE、INSERT、DELETE、UPDATE、和GRANT(REVOKE)。"></a>SQL语言功能很强，其核心功能只用了6个命令，分别是SELECT、CREATE、INSERT、DELETE、UPDATE、和GRANT(REVOKE)。</h3><h2 id="sql功能分类"><a href="#sql功能分类" class="headerlink" title="sql功能分类"></a>sql功能分类</h2><h3 id="DDL-数据定义语言"><a href="#DDL-数据定义语言" class="headerlink" title="DDL:数据定义语言"></a>DDL:数据定义语言</h3><ul>
<li>用来定义数据库对象：创建库，表，列等。</li>
</ul>
<h3 id="DML：数据操作语言"><a href="#DML：数据操作语言" class="headerlink" title="DML：数据操作语言"></a>DML：数据操作语言</h3><ul>
<li>用来操作数据库表中的记录</li>
</ul>
<h3 id="DQL：数据查询语言"><a href="#DQL：数据查询语言" class="headerlink" title="DQL：数据查询语言"></a>DQL：数据查询语言</h3><ul>
<li>用来查询数据</li>
</ul>
<h3 id="DCL：数据控制语言"><a href="#DCL：数据控制语言" class="headerlink" title="DCL：数据控制语言"></a>DCL：数据控制语言</h3><ul>
<li>用来定义访问权限和安全级别</li>
</ul>
<h2 id="SQL数据类型"><a href="#SQL数据类型" class="headerlink" title="SQL数据类型"></a>SQL数据类型</h2><h3 id="MySQL中定义数据字段的类型对你数据库的优化是非常重要的。"><a href="#MySQL中定义数据字段的类型对你数据库的优化是非常重要的。" class="headerlink" title="MySQL中定义数据字段的类型对你数据库的优化是非常重要的。"></a>MySQL中定义数据字段的类型对你数据库的优化是非常重要的。</h3><h3 id="MySQL支持所有标准SQL数值数据类型。"><a href="#MySQL支持所有标准SQL数值数据类型。" class="headerlink" title="MySQL支持所有标准SQL数值数据类型。"></a>MySQL支持所有标准SQL数值数据类型。</h3><h3 id="MySQL支持多种类型，大致可以分为三类"><a href="#MySQL支持多种类型，大致可以分为三类" class="headerlink" title="MySQL支持多种类型，大致可以分为三类"></a>MySQL支持多种类型，大致可以分为三类</h3><ul>
<li><p>数值类型</p>
</li>
<li><p>字符串类型</p>
</li>
<li><p>日期和时间类型</p>
</li>
</ul>
<h3 id="常用数据类型"><a href="#常用数据类型" class="headerlink" title="常用数据类型"></a>常用数据类型</h3><ul>
<li>double：浮点型，例如double(5,2)表示最多5位，其中必须有2位小数，即最大值为999.99；</li>
<li>char：固定长度字符串类型； char(10)  ‘abc       ‘</li>
<li>varchar：可变长度字符串类型；varchar(10) ‘abc’</li>
<li>text：字符串类型;</li>
<li>blob：二进制类型；</li>
<li>date：日期类型，格式为：yyyy-MM-dd；</li>
<li>time：时间类型，格式为：hh:mm:ss</li>
<li>datetime:日期时间类型 yyyy-MM-dd hh:mm:ss</li>
</ul>
<h3 id="在mysql中，字符串类型和日期类型都要用单引号括起来。"><a href="#在mysql中，字符串类型和日期类型都要用单引号括起来。" class="headerlink" title="在mysql中，字符串类型和日期类型都要用单引号括起来。"></a>在mysql中，字符串类型和日期类型都要用单引号括起来。</h3><p>‘Myxq’  ‘2020-01-01’</p>
<h2 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h2><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><ul>
<li>create database 数据库名  character set utf8;</li>
</ul>
<h3 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h3><ul>
<li>alter database 数据库名 charactor set gbk;</li>
</ul>
<h3 id="显示当前数据库"><a href="#显示当前数据库" class="headerlink" title="显示当前数据库"></a>显示当前数据库</h3><ul>
<li>select  database( );</li>
</ul>
<h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><ul>
<li>drop  database  数据库名；</li>
</ul>
<h3 id="创建学生表"><a href="#创建学生表" class="headerlink" title="创建学生表"></a>创建学生表</h3><h3 id="添加一列"><a href="#添加一列" class="headerlink" title="添加一列"></a>添加一列</h3><ul>
<li>ALTER TABLE 表名 ADD 列名 数据类型;</li>
</ul>
<h3 id="查看表的字段信息"><a href="#查看表的字段信息" class="headerlink" title="查看表的字段信息"></a>查看表的字段信息</h3><ul>
<li>DESC 表名;</li>
</ul>
<h3 id="修改一个表的字段类型"><a href="#修改一个表的字段类型" class="headerlink" title="修改一个表的字段类型"></a>修改一个表的字段类型</h3><ul>
<li>ALTER TABLE 表名 MODIFY 字段名  数据类型;</li>
</ul>
<h3 id="删除一列"><a href="#删除一列" class="headerlink" title="删除一列"></a>删除一列</h3><ul>
<li>ALTER TABLE 表名 DROP 字段名;</li>
</ul>
<h3 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h3><ul>
<li>RENAME TABLE 原始表名 TO  要修改的表名;</li>
</ul>
<h3 id="复制表"><a href="#复制表" class="headerlink" title="复制表"></a>复制表</h3><ul>
<li>create table 新表名 like 参照表名；</li>
</ul>
<h3 id="查看表的创建细节"><a href="#查看表的创建细节" class="headerlink" title="查看表的创建细节"></a>查看表的创建细节</h3><ul>
<li>SHOW CREATE TABLE 表名;</li>
</ul>
<h3 id="修改表的字符集为gbk"><a href="#修改表的字符集为gbk" class="headerlink" title="修改表的字符集为gbk"></a>修改表的字符集为gbk</h3><ul>
<li>ALTER TABLE 表名 CHARACTER SET 字符集名称;</li>
</ul>
<h3 id="修改表的列名"><a href="#修改表的列名" class="headerlink" title="修改表的列名"></a>修改表的列名</h3><ul>
<li>ALTER TABLE 表名 CHANGE 原始列名 新列名 数据类型;</li>
</ul>
<h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><ul>
<li>DROP TABLE 表名;</li>
</ul>
<h2 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h2><h3 id="查询表中的所有数据"><a href="#查询表中的所有数据" class="headerlink" title="查询表中的所有数据"></a>查询表中的所有数据</h3><ul>
<li>SELECT * FROM 表名;</li>
</ul>
<h3 id="DML是对表中的数据进行增、删、改的操作"><a href="#DML是对表中的数据进行增、删、改的操作" class="headerlink" title="DML是对表中的数据进行增、删、改的操作"></a>DML是对表中的数据进行增、删、改的操作</h3><h3 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h3><ul>
<li><p>INSERT INTO 表名（列名1，列名2 …）VALUES  (列值1，列值2…);</p>
</li>
<li><p>注意事项</p>
<ul>
<li>列名与列值的类型、个数、顺序要一一对应。</li>
<li>值不要超出列定义的长度。</li>
<li>插入的日期和字符一样，都使用引号括起来。</li>
</ul>
</li>
<li><p>批量插入</p>
<ul>
<li>INSERT INTO 表名（列名1，列名2 …）VALUES (列值1，列值2…)，(列值1，列值2…);</li>
</ul>
</li>
</ul>
<h3 id="更新操作"><a href="#更新操作" class="headerlink" title="更新操作"></a>更新操作</h3><ul>
<li><p>UPDATE 表名 SET 列名1=列值1，列名2=列值2 。。。 WHERE 列名=值</p>
</li>
<li><p>把所有学生的分数改为90</p>
<ul>
<li>update students set  score=90</li>
</ul>
</li>
<li><p>把姓名为张三的学生分数改为60</p>
<ul>
<li>update student set score=60 where name=’张三’;</li>
</ul>
</li>
<li><p>把姓名为李四的年龄改为20和分数改为70</p>
<ul>
<li>update student set age=20,score=70 where name=’李四’;</li>
</ul>
</li>
<li><p>把赵六的年龄在原来基础上加1岁</p>
<ul>
<li>update students set age=age+1 where name=’赵六’;</li>
</ul>
</li>
<li><p>修改数据库密码</p>
<ul>
<li>use mysql;</li>
<li>update user set password=password(‘abc’) WHERE User=’root’;</li>
<li>flush privileges;刷新MySQL的系统权限相关表</li>
<li>mysqladmin -u root -p password 12356</li>
</ul>
</li>
</ul>
<h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><ul>
<li><p>DELETE FROM 表名 【WHERE 列名=值】</p>
</li>
<li><p>TRUNCATE TABLE 表名;</p>
</li>
<li><p>DELETED 与TRUNCATE的区别</p>
<ul>
<li>DELETE 删除表中的数据，表结构还在;删除后的数据可以找回</li>
<li>TRUNCATE 删除是把表直接DROP掉，然后再创建一个同样的新表。</li>
</ul>
</li>
</ul>
<p>删除的数据不能找回。执行速度比DELETE快。</p>
<h2 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h2><h3 id="查询所有列"><a href="#查询所有列" class="headerlink" title="查询所有列"></a>查询所有列</h3><ul>
<li>SELECT * FROM 表名;</li>
</ul>
<h3 id="结果集"><a href="#结果集" class="headerlink" title="结果集"></a>结果集</h3><ul>
<li><p>数据库执行DQL语句不会对数据进行改变，而是让数据库发送结果集给客户端。</p>
</li>
<li><p>结果集</p>
<ul>
<li>通过查询语句查询出来的数据以表的形式展示我们称这个表为虚拟结果集。存放在内存中。</li>
<li>查询返回的结果集是一张虚拟表。</li>
</ul>
</li>
</ul>
<h3 id="查询指定列的数据"><a href="#查询指定列的数据" class="headerlink" title="查询指定列的数据"></a>查询指定列的数据</h3><ul>
<li>SELECT 列名1，列表2… FROM 表名;</li>
</ul>
<h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><ul>
<li><p>条件查询就是在查询时给出WHERE子句，在WHERE子句中可以使用一些运算符及关键字：</p>
</li>
<li><p>条件查询运行符及关键字</p>
<ul>
<li><p>=（等于）、!=（不等于）、&lt;&gt;（不等于）、&lt;（小于）、&lt;=（小于等于）、&gt;（大于）、&gt;=（大于等于）；</p>
</li>
<li><p>BETWEEN…AND；值在什么范围</p>
</li>
<li><p>IN(set)；</p>
<ul>
<li>固定的范围值</li>
</ul>
</li>
<li><p>IS NULL；（为空） IS NOT NULL（不为空）   </p>
</li>
<li><p>AND；与</p>
</li>
<li><p>OR；或</p>
</li>
<li><p>NOT； 非</p>
</li>
</ul>
</li>
<li><p>使用</p>
<ul>
<li><p>查询性别为男，并且年龄为20的学生记录</p>
<ul>
<li>SELECT * FROM students WHERE gender=’男’ AND age=20;</li>
</ul>
</li>
<li><p>查询学号为1 或者 名为zs的记录</p>
<ul>
<li>SELECT * FROM students WHERE id =1 OR name=’zs’;</li>
</ul>
</li>
<li><p>查询学号为1，2，3的记录</p>
<ul>
<li>SELECT * FROM students WHERE id=’1001’ OR id=’1002’ OR 1001=’1003’;</li>
<li>SELECT * FROM students WHERE id  IN(‘1001’,’1002’,’1003’);</li>
<li>SELECT * FROM students WHERE id NOT IN (‘1001’,’1002’,’1003’);</li>
</ul>
</li>
<li><p>查询年龄为null的记录</p>
<ul>
<li>SELECT * FROM students WHERE age IS NULL;</li>
</ul>
</li>
<li><p>查询年龄在18到20之间的学生记录</p>
<ul>
<li>SELECT * FROM students WHERE age&gt;=18 AND age&lt;=20;</li>
<li>SELECT * FROM students WHERE age BETWEEN 18 AND 20;</li>
</ul>
</li>
<li><p>查询性别非男的学生记录</p>
<ul>
<li>SELECT * FROM students WHERE gender !=’男’;</li>
</ul>
</li>
<li><p>查询姓名不为null的学生记录</p>
<ul>
<li>SELECT * FROM students WHERE  name IS NOT  NULL;</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><ul>
<li><p>根据指定的关键进行查询</p>
</li>
<li><p>使用LIKE关键字后跟通配符</p>
</li>
<li><p>通配符</p>
<ul>
<li>_  ：任意一个字符</li>
<li>%：任意0~n个字符</li>
</ul>
</li>
<li><p>使用</p>
<ul>
<li><p>查询姓名由5个字母构成的学生记录</p>
<ul>
<li>SELECT * FROM students WHERE name LIKE ‘_____’;</li>
<li>模糊查询必须使用LIKE关键字。其中 “_”匹配任意一个字母，5个“_”表示5个任意字母。</li>
</ul>
</li>
<li><p>查询姓名由5个字母构成，并且第5个字母为“s”的学生记录</p>
<ul>
<li>SELECT * FROM students WHERE name LIKE ‘____s’;</li>
</ul>
</li>
<li><p>查询姓名以“m”开头的学生记录</p>
<ul>
<li>SELECT * FROM students WHERE name LIKE ‘m%’;</li>
<li>其中“%”匹配0~n个任何字母。</li>
</ul>
</li>
<li><p>查询姓名中第2个字母为“u”的学生记录</p>
<ul>
<li>SELECT * FROM students WHERE name LIKE ‘_u%’;</li>
</ul>
</li>
<li><p>查询姓名中包含“s”字母的学生记录</p>
<ul>
<li>SELECT * FROM stu WHERE name LIKE ‘%s%’;</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="字段控制查询"><a href="#字段控制查询" class="headerlink" title="字段控制查询"></a>字段控制查询</h3><ul>
<li><p>去除重复字段</p>
<ul>
<li>SELECT DISTINCT name FROM students;</li>
</ul>
</li>
<li><p>把查询字段的结果进行运算，必须都要是数据型</p>
<ul>
<li>SELECT *,字段1+字段2 FROM 表名;</li>
<li>列有很多记录的值为NULL，</li>
</ul>
</li>
</ul>
<p>因为任何东西与NULL相加结果还是NULL，所以结算结果可能会出现NULL。<br>下面使用了把NULL转换成数值0的函数IFNULL：<br>    - SELECT *,age+IFNULL(score,0) FROM students;</p>
<ul>
<li><p>对查询结果起别名</p>
<ul>
<li>在上面查询中出现列名为sx+IFNULL(yw,0)，这很不美观，现在我们给这一列给出一个别名，为total：</li>
<li>SELECT *, yw+IFNULL(sx,0) AS total FROM score;</li>
<li>省略 AS SELECT *, yw+IFNULL(sx,0)  total FROM score;</li>
</ul>
</li>
</ul>
<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><ul>
<li><p>创建表</p>
<ul>
<li><p>CREATE TABLE <code>employee</code> (<br><code>id</code> int(11) NOT NULL,<br><code>name</code> varchar(50) DEFAULT NULL,<br><code>gender</code> varchar(1) DEFAULT NULL,<br><code>hire_date</code> date DEFAULT NULL,<br><code>salary</code> decimal(10,0) DEFAULT NULL,<br><code>performance</code> double(255,0) DEFAULT NULL,<br><code>manage</code> double(255,0) DEFAULT NULL,<br><code>department</code> varchar(255) DEFAULT NULL<br>  ) ENGINE=InnoDB DEFAULT CHARSET=utf8;</p>
</li>
<li><p>INSERT INTO <code>employee</code> VALUES (1001, ‘张三’, ‘男’, ‘1991-7-25’, 2000, 200, 500, ‘营销部’);</p>
</li>
<li><p>INSERT INTO <code>employee</code> VALUES (1002, ‘李四’, ‘男’, ‘2017-7-5’, 4000, 500, NULL, ‘营销部’);</p>
</li>
<li><p>INSERT INTO <code>employee</code> VALUES (1003, ‘王五’, ‘女’, ‘2018-5-1’, 6000, 100, 5000, ‘研发部’);</p>
</li>
<li><p>INSERT INTO <code>employee</code> VALUES (1004, ‘赵六’, ‘男’, ‘1991-6-1’, 1000, 3000, 4000, ‘财务部’);</p>
</li>
<li><p>INSERT INTO <code>employee</code> VALUES (1005, ‘孙七’, ‘女’, ‘2018-3-23’, 8000, 1000, NULL, ‘研发部’);</p>
</li>
<li><p>INSERT INTO <code>employee</code> VALUES (1006, ‘周八’, ‘男’, ‘2010-9-8’, 5000, 500, 1000, ‘人事部’);</p>
</li>
<li><p>INSERT INTO <code>employee</code> VALUES (1007, ‘吴九’, ‘女’, ‘2017-7-5’, 8000, 601, NULL, ‘研发部’);</p>
</li>
<li><p>INSERT INTO <code>employee</code> VALUES (1008, ‘郑十’, ‘女’, ‘2014-4-6’, 4000, 1801, NULL, ‘人事部’);</p>
</li>
</ul>
</li>
<li><p>对查询的结果进行排序</p>
</li>
<li><p>使用关键字ORDER BY</p>
</li>
<li><p>排序类型</p>
<ul>
<li><p>升序ASC</p>
<ul>
<li>从小到大  默认</li>
</ul>
</li>
<li><p>降序DESC</p>
<ul>
<li>从大到小</li>
</ul>
</li>
</ul>
</li>
<li><p>使用</p>
<ul>
<li><p>对所有员工的薪水进行排序</p>
<ul>
<li>SELECT *FROM employee ORDER BY salary ASC;</li>
</ul>
</li>
<li><p>查询所有员工记录，按年龄降序排序</p>
<ul>
<li>SELECT * FROM employee ORDER BY salary DESC;</li>
</ul>
</li>
<li><p>查询所有雇员，按月薪降序排序，如果月薪相同时，按编号升序排序</p>
<ul>
<li>SELECT * FROM employee ORDER BY salary DESC, id ASC;</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><ul>
<li><p>对查询的结果进行统计计算</p>
</li>
<li><p>常用聚合函数</p>
<ul>
<li>COUNT()：统计指定列不为NULL的记录行数；</li>
<li>MAX()：计算指定列的最大值，如果指定列是字符串类型，那么使用字符串排序运算；</li>
<li>MIN()：计算指定列的最小值，如果指定列是字符串类型，那么使用字符串排序运算；</li>
<li>SUM()：计算指定列的数值和，如果指定列类型不是数值类型，那么计算结果为0；</li>
<li>AVG()：计算指定列的平均值，如果指定列类型不是数值类型，那么计算结果为0；</li>
</ul>
</li>
<li><p>使用</p>
<ul>
<li><p>COUNT</p>
<ul>
<li><p>查询employee表中记录数：</p>
<ul>
<li>SELECT COUNT(*) AS total_record FROM employee;</li>
</ul>
</li>
<li><p>查询员工表中有绩效的人数</p>
<ul>
<li>SELECT COUNT(performance)  FROM employee;</li>
</ul>
</li>
<li><p>查询员工表中月薪大于2500的人数：</p>
<ul>
<li>SELECT COUNT(*) FROM employee WHERE salary &gt; 2500;</li>
</ul>
</li>
<li><p>统计月薪与管理费之和大于5000元的人数：</p>
<ul>
<li>SELECT COUNT(*)  FROM employee WHERE salary+IFNULL(manage,0) &gt; 5000;</li>
</ul>
</li>
<li><p>查询有绩效的人数，和有管理费的人数：</p>
<ul>
<li>SELECT COUNT(performance), COUNT(manage) FROM employee;</li>
</ul>
</li>
</ul>
</li>
<li><p>SUM和AVG</p>
<ul>
<li><p>查询所有雇员月薪和：</p>
<ul>
<li>SELECT SUM(salary) FROM employee;</li>
</ul>
</li>
<li><p>查询所有雇员月薪和，以及所有雇员绩效和</p>
<ul>
<li>SELECT SUM(salary), SUM(performance) FROM employee;</li>
</ul>
</li>
<li><p>查询所有雇员月薪+绩效和：</p>
<ul>
<li>SELECT SUM(salary+IFNULL(performance,0)) FROM employee;</li>
</ul>
</li>
<li><p>统计所有员工平均工资：</p>
<ul>
<li>SELECT AVG(salary) FROM employee;</li>
</ul>
</li>
</ul>
</li>
<li><p>MAX和MIN</p>
<ul>
<li><p>查询最高工资和最低工资：</p>
<ul>
<li>SELECT MAX(salary), MIN(salary) FROM employee;</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="以上就是对sql语句使用的详细操作说明"><a href="#以上就是对sql语句使用的详细操作说明" class="headerlink" title="以上就是对sql语句使用的详细操作说明"></a>以上就是对sql语句使用的详细操作说明</h4><h3 id="ps："><a href="#ps：" class="headerlink" title="ps："></a>ps：</h3><h3 id="资料参考于课本和讲解"><a href="#资料参考于课本和讲解" class="headerlink" title="资料参考于课本和讲解"></a>资料参考于课本和讲解</h3><h3 id="转载请注明出处https-lil-sum-github-io-，-感谢配合"><a href="#转载请注明出处https-lil-sum-github-io-，-感谢配合" class="headerlink" title="转载请注明出处https://lil-sum.github.io/， 感谢配合."></a>转载请注明出处<a href="https://lil-sum.github.io/%EF%BC%8C">https://lil-sum.github.io/，</a> 感谢配合.</h3>]]></content>
      <tags>
        <tag>术语定义类</tag>
      </tags>
  </entry>
  <entry>
    <title>关于树的定义</title>
    <url>/2021/03/18/%E5%85%B3%E4%BA%8E%E6%A0%91%E7%9A%84%E5%AE%9A%E4%B9%89/</url>
    <content><![CDATA[<h2 id="二叉树的种类"><a href="#二叉树的种类" class="headerlink" title="二叉树的种类"></a>二叉树的种类</h2><hr>
<h3 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h3><hr>
<p>满二叉树：<br>如果一棵二叉树只有度为0的结点和度为2的结点，并且度为0的结点在同一层上，则这棵二叉树为满二叉树。深度为k，有2^k-1个节点的二叉树。</p>
<h3 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h3><hr>
<p>完全二叉树：在完全二叉树中，除了最底层节点可能没填满外，其余每层节点数都达到最大值，并且最下面一层的节点都集中在该层最左边的若干位置。若最底层为第 h 层，则该层包含 1~ 2^h -1 个节点。</p>
<p>我们可以给完全二叉树编号，这样父子之间就可以通过编号轻松求出。<br>比如我给所有节点从左到右从上到下依次从 1 开始编号。</p>
<p>那么已知一个节点的编号是 i，那么其左子节点就是 2 i，右子节点就是 2 1 + 1，父节点就是 (i + 1) / 2。</p>
<hr>
<h2 id="二叉树的最大宽度"><a href="#二叉树的最大宽度" class="headerlink" title="二叉树的最大宽度"></a>二叉树的最大宽度</h2><h3 id="序列化二叉树"><a href="#序列化二叉树" class="headerlink" title="序列化二叉树"></a>序列化二叉树</h3><h3 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h3><p>二叉搜索树是有数值的了，二叉搜索树是一个有序树。</p>
<p>若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值；<br>若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值；</p>
<p>它的左、右子树也分别为二叉排序树</p>
<h3 id="平衡二叉搜索树"><a href="#平衡二叉搜索树" class="headerlink" title="平衡二叉搜索树"></a>平衡二叉搜索树</h3><p>平衡二叉搜索树：又被称为AVL（Adelson-Velsky and Landis）树，且具有以下性质：</p>
<p>它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。<br>对于一个二叉查找树，常规操作有插入，查找，删除，找父节点，求最大值，求最小值。</p>
<h5 id="核心：二叉搜索树的中序遍历的结果是一个有序数组"><a href="#核心：二叉搜索树的中序遍历的结果是一个有序数组" class="headerlink" title="核心：二叉搜索树的中序遍历的结果是一个有序数组"></a>核心：二叉搜索树的中序遍历的结果是一个有序数组</h5><h3 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h3><p>验证二叉搜索树</p>
<p>二叉搜索树迭代器</p>
<p>二叉树的遍历</p>
<p>一个中心</p>
<h3 id="树的遍历："><a href="#树的遍历：" class="headerlink" title="树的遍历："></a>树的遍历：</h3><p>遍历不是目的，遍历是为了更好地做处理，这里的处理包括搜索，修改树等。</p>
<p>树虽然只能从根开始访问，但是可以选择在访问完毕回来的时候做处理，</p>
<p>还是在访问回来之前做处理，这两种不同的方式就是后序遍历和先序遍历。</p>
<p>有两个知识点：</p>
<p>DFS（深度优先遍历）</p>
<p>BFS（宽度优先遍历）</p>
<h3 id="ps："><a href="#ps：" class="headerlink" title="ps："></a>ps：</h3><h3 id="资料参考于课本和讲解"><a href="#资料参考于课本和讲解" class="headerlink" title="资料参考于课本和讲解"></a>资料参考于课本和讲解</h3><h3 id="转载请注明出处https-lil-sum-github-io-，-感谢配合"><a href="#转载请注明出处https-lil-sum-github-io-，-感谢配合" class="headerlink" title="转载请注明出处https://lil-sum.github.io/， 感谢配合."></a>转载请注明出处<a href="https://lil-sum.github.io/%EF%BC%8C">https://lil-sum.github.io/，</a> 感谢配合.</h3>]]></content>
      <tags>
        <tag>术语定义类</tag>
      </tags>
  </entry>
  <entry>
    <title>前端网页开发之 Typora使用教程</title>
    <url>/2020/12/18/%E5%89%8D%E7%AB%AF%E7%BD%91%E9%A1%B5%E5%BC%80%E5%8F%91%E4%B9%8BTypora%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="一、Markdown与Typora介绍"><a href="#一、Markdown与Typora介绍" class="headerlink" title="一、Markdown与Typora介绍"></a>一、Markdown与Typora介绍</h1><h2 id="1-1-Markdown介绍"><a href="#1-1-Markdown介绍" class="headerlink" title="1.1 Markdown介绍"></a>1.1 Markdown介绍</h2><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</p>
<p>Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。</p>
<p>Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。</p>
<p>Markdown 编写的文档后缀为 .md, .markdown。</p>
<h2 id="1-2-Typora介绍与下载"><a href="#1-2-Typora介绍与下载" class="headerlink" title="1.2 Typora介绍与下载"></a>1.2 Typora介绍与下载</h2><p>Typora编辑器让人们能更简单地用Markdown语言书写文字，解决了使用传统的Markdown编辑器写文的痛点，并且界面简洁优美，实现了实时预览等功能。</p>
<p>Typora官网： <a href="https://typora.io/%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%8E%BB%E5%90%BE%E7%88%B1%E7%A0%B4%E8%A7%A3%E4%B8%8B%E8%BD%BD%E4%B8%AD%E6%96%87%E7%A0%B4%E8%A7%A3%E7%89%88%EF%BC%8C%E5%96%84%E7%94%A8%E6%90%9C%E7%B4%A2">https://typora.io/，可以去吾爱破解下载中文破解版，善用搜索</a></p>
<p>windos版本下载地址：<a href="https://typora.io/#windows">https://typora.io/#windows</a></p>
<p>请根据自己的电脑配置自行下载安装，过程简单，在此不多做介绍。</p>
<h1 id="二、Markdown语法"><a href="#二、Markdown语法" class="headerlink" title="二、Markdown语法"></a>二、Markdown语法</h1><h2 id="2-1-标题"><a href="#2-1-标题" class="headerlink" title="2.1 标题"></a>2.1 标题</h2><p>使用 # 可以表示标题，一级标题对应一个 # ，二级标题对应两个 # 号，最多至六级标题。在Typora中，# 后要紧接着一个空格才能表示标题，否则就是普通字符。</p>
<p>在Typora中，也可以使用快捷键Ctrl+1（2，3，4，5，6）表示相对应的标题。Ctrl+0表示段落。标题快捷键信息可在菜单栏中的段落选项下查看。</p>
<h2 id="2-2-字体"><a href="#2-2-字体" class="headerlink" title="2.2 字体"></a>2.2 字体</h2><p>用一对星号<em>括住的文本表示斜体文本，如：</em>要变斜体的文本*，斜体文本 ；<br>也可以用一对下划线_括住文本来表示斜体文本，如：_要变斜体的文本_，斜体文本 ；<br>也可以使用Typora的快捷键Ctrl+I来表示斜体文本。</p>
<p>用一对<strong>括住的文本表示粗体文本，如：</strong>要变粗体的文本**，粗体文本；<br>也可以用一对__括住的文本来表示粗体文本，如：__要变粗体的文本__，粗体文本；<br>也可以使用Typora的快捷键Ctrl+B来表示粗体文本。</p>
<p>用一对<em><strong>括住的文本表示粗斜体文本，如：</strong></em>要变粗斜体的文本***，粗斜体文本；<br>也可以用一对___括住的文本来表示粗斜体文本，如：___要变粗斜体的文本___，粗斜体文本；</p>
<h2 id="2-3-各种线"><a href="#2-3-各种线" class="headerlink" title="2.3 各种线"></a>2.3 各种线</h2><p>分割线，可以使用三个及以上的 + 号或 * 号或 - 来表示一条分割线；<br>由三个*号表示的分割线：</p>
<p>由三个+号表示的分割线：</p>
<p>+++(在CSDN中不代表分割线）</p>
<p>由三个-号表示的分割线：</p>
<p>删除线，可以使用一对<del>括住的文本来表示删除文本，如：</del>要加删除线的文本~~，删除文本；在Typora中，也可以使用快捷键Alt+Shift+5来加删除线，语法相同，删除线。<br>下划线，可以使用HTML的标签<u>和</u>表示增加下划线的文本，如：<u>要增加下划线的文本</u>，下划线；在Typora中，也可以使用快捷键Ctrl+U来增加下划线，语法也是相同的，下划线。</p>
<h2 id="2-4-列表"><a href="#2-4-列表" class="headerlink" title="2.4 列表"></a>2.4 列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>可以使用*，+或-标记符号来表示无序列表项，记住要在标记符号后添加一个空格，语法显示如下：</p>
<ul>
<li>第一项</li>
<li>第二项</li>
</ul>
<ul>
<li>第一项</li>
<li>第二项</li>
</ul>
<ul>
<li>第一项</li>
<li>第二项<br>结果如下：</li>
</ul>
<p>第一项<br>第二项<br>第一项<br>第二项<br>第一项<br>第二项</p>
<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>可以使用数字加上.再加上空格来表示有序列表</p>
<p>结果如下：</p>
<p>第一项<br>第二项<br>第三项<br>从结果可以看出，数字并不重要。</p>
<h3 id="嵌套列表"><a href="#嵌套列表" class="headerlink" title="嵌套列表"></a>嵌套列表</h3><p>一<br>1.1<br>1.1.1<br>1.1.1.2<br>1.1.1.3<br>二<br>2.1<br>2.1.1<br>有序列表第一项<br>有序列表第二项<br>首先使用*、+或-进入列表，然后回车换行，会发现系统自动生成列表第二项，此时按下Tab键，列表第二项变为第一项的子列表。按回车退出当前列表。可以在无序列表中嵌套有序列表。</p>
<p>一<br>一、一<br>一、一、一<br>一、一、一、一<br>一、一、一、二<br>二<br>二、一<br>无序列表第一项<br>无序列表第二项<br>也可以在有序列表中嵌套无序列表。</p>
<h2 id="2-5-区块"><a href="#2-5-区块" class="headerlink" title="2.5 区块"></a>2.5 区块</h2><p>当我们想要引用别人的文章内容时，可以将其放在区块内。</p>
<p>可以使用&gt;加空格来表示区块。</p>
<p>这是区块</p>
<p>区块也可以嵌套</p>
<p>二级区块</p>
<p>三级区块</p>
<p>要退出区块，同样使用Enter键即可。</p>
<h2 id="2-6-代码"><a href="#2-6-代码" class="headerlink" title="2.6 代码"></a>2.6 代码</h2><p>如果是一行代码，可以使用段内代码块来表示，用一对 `（数字1旁边的符号）括住代码。</p>
<p>比如printf(“Hello World!”)</p>
<p>如果是代码段，那么可以使用三个 ` 加Enter/空格+编程语言来表示。如：</p>
<p>include &lt;stdio.h&gt;</p>
<p>void main(){<br>    printf(“Hello world!\n”);<br>}</p>
<p>可以在代码块的右下角选择编程语言。</p>
<h2 id="2-7-链接"><a href="#2-7-链接" class="headerlink" title="2.7 链接"></a>2.7 链接</h2><p>链接的使用方式有两种语法，如下：</p>
<p><a href="%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80">链接文字</a><br>或<br>&lt;链接地址&gt;</p>
<p>我们可以使用链接打开网页，示例如下：</p>
<p><a href="https://www.baidu.com/">百度</a><br><a href="https://www.baidu.com/">https://www.baidu.com/</a><br>显示效果如下：</p>
<p>百度<br><a href="https://www.baidu.com/">https://www.baidu.com/</a></p>
<p>当鼠标移到相应的链接文字时，按住Ctrl+鼠标左键点击访问。</p>
<p>链接除了可以打开相应的网页外，还可以打开本地文件，使用方式类似，不过链接地址需要使用本地文件的地址，相对地址、绝对地址均可：</p>
<p>示例：</p>
<p><a href="./LinkTest.md">打开LinkTest.md文档</a><br><a href="./img/LinkTest.png">打开LinkTest.png照片</a><br>1<br>2<br>结果如下：</p>
<p>打开LinkTest.md文档</p>
<p>打开LinkTest.png照片</p>
<p>经测试可以打开相应的文件。但是不能使用&lt;要打开的文件地址&gt;来打开相应的文件，比如&lt;./LinkTest.md&gt;并没有表现为可链接状态。</p>
<p>补充知识：</p>
<p>一个小圆点.表示当前目录，故./LinkTest.md表示当前目录下的LinkTest.md文件，./img/LinkTest.png表示当前目录下的img文件下的LinkTest.png文件。</p>
<p>两个小圆点..表示上一级目录。</p>
<p>我们也可以使用链接来实现页内跳转，语法为：</p>
<p><a href="#%E6%A0%87%E9%A2%98%E6%96%87%E5%AD%97">链接文字</a><br>1<br>示例：</p>
<p>[跳转到第一章第一节](#1.1 Markdown介绍)<br>1<br>结果如下：<br>[跳转到第一章第一节](#1.1 Markdown介绍)</p>
<p>经测试，可以成功跳转。</p>
<h2 id="2-8-图片"><a href="#2-8-图片" class="headerlink" title="2.8 图片"></a>2.8 图片</h2><p>我们也可以在Markdown文档中插入图片，语法如下：</p>
<p><img src="/%E5%9B%BE%E7%89%87%E5%9C%B0%E5%9D%80" alt="alt 属性文本"></p>
<p><img src="/%E5%9B%BE%E7%89%87%E5%9C%B0%E5%9D%80" alt="alt 属性文本" title="可选标题"></p>
<p>首先一个感叹号<br>然后中括号里面写属性文本<br>小括号里面写图片地址，后可接标题</p>
<p>示例语法：</p>
<p><img src="/./img/PictureTest.png" alt="本地png图片PictureTest.png"></p>
<p><img src="/./img/PictureTest.jpg" alt="本地jpg图片"></p>
<p>结果如下：</p>
<p><img src="http://static.runoob.com/images/runoob-logo.png" alt="网络图片" title="菜鸟教程"></p>
<p>在Typora中，也可以直接使用Ctrl+C，Ctrl+V来直接进行复制粘贴图片，但是，由于Markdown是需要图片的地址的，所以需要简单设置一下Typora。</p>
<p>点击文件 –&gt; 偏好设置 –&gt; 图像，如下：</p>
<p>可以自行设置选择将图片复制到哪个文件夹。</p>
<p>这里选择复制到指定路径，然后在下面一栏中填写./img，表示将图片复制到你正在编辑的文档同一级的img文件夹下。在下面的选项中，勾选第一、二、三项。正因为勾选了第二项，所以当我们在插入网络图片时，Typora会自动帮我们将网络图片下载到指定的路径下，前面的”菜鸟教程”图片便是如此。</p>
<p>由于Markdown的特殊语法，故经常会出现图片加载失败的情况，很大的可能就是因为在指定的路径上找不到相应的图片，当然，有时候也是由于Typora的原因，重启Typora即可。</p>
<h2 id="2-9-表格"><a href="#2-9-表格" class="headerlink" title="2.9 表格"></a>2.9 表格</h2><p>Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。</p>
<p>结果如下：</p>
<table>
<thead>
<tr>
<th>表头</th>
<th>表头</th>
<th>表头</th>
</tr>
</thead>
<tbody><tr>
<td>单元格</td>
<td>单元格</td>
<td>单元格</td>
</tr>
<tr>
<td>单元格</td>
<td>单元格</td>
<td>单元格</td>
</tr>
</tbody></table>
<p>我们可以设置对齐方式：</p>
<p>:-表示左对齐<br>-:表示右对齐<br>:-:表示中间对齐<br>示例如下：</p>
<table>
<thead>
<tr>
<th align="left">左对齐</th>
<th align="right">右对齐</th>
<th align="center">中间对齐</th>
</tr>
</thead>
<tbody><tr>
<td align="left">单元格</td>
<td align="right">单元格</td>
<td align="center">单元格</td>
</tr>
<tr>
<td align="left">单元格</td>
<td align="right">单元格</td>
<td align="center">单元格</td>
</tr>
</tbody></table>
<p>在Typora中，我们可以使用快捷键Ctrl+T来插入表格，并选择行列，当选中表格某一单元格时，可以在表格左上角手动设置对齐方式，右上角选择更多操作。</p>
<h1 id="三、Typora与数学公式"><a href="#三、Typora与数学公式" class="headerlink" title="三、Typora与数学公式"></a>三、Typora与数学公式</h1><p>在本章中，重点不在于介绍如何插入数学公式，而在于如何表示数学符号。</p>
<h3 id="3-1-如何插入数学公式"><a href="#3-1-如何插入数学公式" class="headerlink" title="3.1 如何插入数学公式"></a>3.1 如何插入数学公式</h3><p>在Typora中，有两种方法插入数学公式，语法为：</p>
<p>第一种方法：$数学公式$<br>第二种方法：<br>$$<br>数学公式<br>$$<br>1<br>2<br>3<br>4<br>5<br>第一种方法表示插入行内公式（内联公式），即可以将公式插入到一行中，比如1 + 2 = 3 1+2=31+2=3这样的公式。</p>
<p>第二种方法表示插入行间公式（外联公式），即可以将公式插入到行与行之间，单独占据一行或者数行的空间，并且居中放置。<br>1 + 2 = 3 1+2=3<br>1+2=3</p>
<p>如果要在行间公式内换行，在换行的位置使用\。</p>
<p>接下来重点介绍如何表示数学符号。</p>
<h3 id="3-2-上标下标"><a href="#3-2-上标下标" class="headerlink" title="3.2 上标下标"></a>3.2 上标下标</h3><p>上下标可以使用^，_后跟相应的符号来实现。如：</p>
<p>上 标 ： a 1 ， 下 标 ： a 1 上标：a^1，下标：a_1上标：a<br>1<br> ，下标：a<br>1</p>
<p>如果作为上标、下标的符号不止一个，则需要用花括号{}将其括起来。如：</p>
<p>上 标 为 12 ： a 12 , 下 标 为 34 ： a 34 上标为12：a^{12},下标为34：a_{34}上标为12：a<br>12<br> ,下标为34：a<br>34</p>
<p>更多例子：<br>f ( x ) = x x x e x 2 e x 2 f(x)=x^{x^x}\ e^{x2}\ e^{x^2}\<br>f(x)=x<br>x<br>x</p>
<p>e<br>x2</p>
<p>e<br>x<br>2</p>
<h3 id="3-3-根号"><a href="#3-3-根号" class="headerlink" title="3.3 根号"></a>3.3 根号</h3><p>我们可以使用\sqrt{}来表示根号。如：</p>
<p>\sqrt{2},\sqrt{5}<br>1<br>结果为：</p>
<p>2 , 5 \sqrt{2},\sqrt{5}<br>2</p>
<p> ,<br>5</p>
<p>我们也可以使用\sqrt[]{}来表示更具体的根号信息：</p>
<p>\sqrt[3]{4}，\sqrt[4]{10}<br>1<br>4 3 ， 10 4 \sqrt[3]{4}，\sqrt[4]{10}<br>3</p>
<p>4</p>
<p> ，<br>4</p>
<p>10</p>
<h3 id="3-4-上下水平线"><a href="#3-4-上下水平线" class="headerlink" title="3.4 上下水平线"></a>3.4 上下水平线</h3><p>我们可以使用\underline{},\overline{}来表示上下水平线，如：</p>
<p>$下水平线：\underline{a+b}$<br>$上水平线：\overline{a+b}$<br>1<br>2<br>结果为：</p>
<p>下 水 平 线 ： a + b ‾ 下水平线：\underline{a+b}下水平线：<br>a+b</p>
<p>上 水 平 线 ： a + b ‾ 上水平线：\overline{a+b}上水平线：<br>a+b</p>
<h3 id="3-5-上下水平大括号"><a href="#3-5-上下水平大括号" class="headerlink" title="3.5 上下水平大括号"></a>3.5 上下水平大括号</h3><p>我们可以使用\overbrace{} 和 \underbrace{} 在表达式的上、下方给出一水平的大括号</p>
<p>$\overbrace{x_1+x_2+x_3}$<br>$\underbrace{x_1+x_2+x_3}$<br>1<br>2<br>结果为：</p>
<p>x 1 + x 2 + x 3 ⏞ \overbrace{x_1+x_2+x_3}<br>x<br>1</p>
<p> +x<br>2</p>
<p> +x<br>3</p>
<p>x 1 + x 2 + x 3 ⏟ \underbrace{x_1+x_2+x_3}<br>x<br>1</p>
<p> +x<br>2</p>
<p> +x<br>3</p>
<p>当然，我们也可以在括号上添加说明，使用语法为\overbrace{}^{}和\underbrace{}_{}</p>
<p>$\overbrace{x_1+x_2+x_3}^{3个元素}$<br>$\underbrace{x_1+x_2+x_3}_{3个元素}$<br>1<br>2<br>x 1 + x 2 + x 3 ⏞ 3 个 元 素 \overbrace{x_1+x_2+x_3}^{3个元素}<br>x<br>1</p>
<p> +x<br>2</p>
<p> +x<br>3</p>
<p>3个元素</p>
<p>x 1 + x 2 + x 3 ⏟ 3 个 元 素 \underbrace{x_1+x_2+x_3}_{3个元素}<br>3个元素<br>x<br>1</p>
<p> +x<br>2</p>
<p> +x<br>3</p>
<h3 id="3-6-向量符号"><a href="#3-6-向量符号" class="headerlink" title="3.6 向量符号"></a>3.6 向量符号</h3><p>我们可以使用\vec{}来表示单个字母向量，其实也可以表示多个字母，但不美观，另两个命令\overrightarrow{} 和\overleftarrow{}在定义从A 到B 的向量时非常有用。如：</p>
<p>$\vec{a}$<br>$\vec{AB}$<br>$\vec{ABC}$<br>$\overrightarrow{AB}$<br>$\overleftarrow{AB}$<br>1<br>2<br>3<br>4<br>5<br>结果为：</p>
<p>a ⃗ \vec{a}<br>a</p>
<p>A B ⃗ \vec{AB}<br>AB</p>
<p>A B C ⃗ \vec{ABC}<br>ABC</p>
<p>A B → \overrightarrow{AB}<br>AB</p>
<p>A B ← \overleftarrow{AB}<br>AB</p>
<h3 id="3-7-分数"><a href="#3-7-分数" class="headerlink" title="3.7 分数"></a>3.7 分数</h3><p>我们可以使用\frac{}{}来表示分数，如：</p>
<p>$\frac{1}{2}$<br>$\frac{\sqrt{3}}{4}$<br>1<br>2<br>结果为：</p>
<p>1 2 \frac{1}{2}<br>2<br>1</p>
<p>3 4 \frac{\sqrt{3}}{4}<br>4<br>3</p>
<h3 id="3-8-积分运算符"><a href="#3-8-积分运算符" class="headerlink" title="3.8 积分运算符"></a>3.8 积分运算符</h3><p>积分运算符用\int 来生成 ，用\int_{}^{}来表示积分上下界，如：</p>
<p>$\int$<br>$\int_{1}^{2}$<br>1<br>2<br>结果为：</p>
<p>∫ \int∫<br>∫ 1 2 \int_{1}^{2}∫<br>1<br>2</p>
<h3 id="3-9-求和运算符"><a href="#3-9-求和运算符" class="headerlink" title="3.9 求和运算符"></a>3.9 求和运算符</h3><p>求和运算符可以使用\sum来生成，用\sum_{}^{}来表示求和上下界，如：</p>
<p>$\sum$<br>$\sum_{i=1}^{10}x_i$<br>1<br>2<br>结果为：</p>
<p>∑ \sum∑<br>∑ i = 1 10 x i \sum_{i=1}^{10}x_i∑<br>i=1<br>10</p>
<p> x<br>i</p>
<p>求和符号的上下标在内联公式里，表现为上面那样，当在外联公式里时，表现如下：<br>∑ i = 1 10 x i \sum_{i=1}^{10}x_i<br>i=1<br>∑<br>10</p>
<p> x<br>i</p>
<h3 id="3-10-连乘运算符"><a href="#3-10-连乘运算符" class="headerlink" title="3.10 连乘运算符"></a>3.10 连乘运算符</h3><p>连乘运算符用\prod{}表示，同样地，上下标用prod_{}^{}表示，如：</p>
<p>$\prod$<br>$\prod_{i=1}^{10}x_i$<br>$$<br>\prod_{i=1}^{10}x_i<br>$$<br>1<br>2<br>3<br>4<br>5<br>结果为：</p>
<p>∏ \prod∏<br>∏ i = 1 10 x i \prod_{i=1}^{10}x_i∏<br>i=1<br>10</p>
<p> x<br>i</p>
<p>∏ i = 1 10 x i \prod_{i=1}^{10}x_i<br>i=1<br>∏<br>10</p>
<p> x<br>i</p>
<h3 id="3-11-特殊符号"><a href="#3-11-特殊符号" class="headerlink" title="3.11 特殊符号"></a>3.11 特殊符号</h3><p>希腊字母</p>
<p>α \alphaα为\alpha，β \betaβ为\beta，γ \gammaγ为\gamma，θ \thetaθ为\theta，ρ \rhoρ为\rho，λ \lambdaλ为\lambda，μ \muμ为\mu</p>
<p>Δ \DeltaΔ为\Delta，π \piπ为\pi，Ω \OmegaΩ为\Omega</p>
<p>关系运算符</p>
<p>大于&gt;，大于等于≥ \geq≥为\geq或\ge</p>
<p>小于&lt;，小于等于≤ \leq≤为\leq或\le</p>
<p>等于=，不等于≠ \neq<br></p>
<p> =为\neq或\ne</p>
<p>加减乘除</p>
<p>加+ 减-</p>
<p>乘× \times×为\times 除÷ \div÷为\div</p>
<h3 id="3-12-矩阵表示"><a href="#3-12-矩阵表示" class="headerlink" title="3.12 矩阵表示"></a>3.12 矩阵表示</h3><p>我们可以使用以下格式来显示矩阵：<br>$$<br>\begin{matrix}<br>1 &amp; 2 &amp; 3\<br>4 &amp; 5 &amp; 6\<br>\end{matrix}<br>$$<br>1<br>2<br>3<br>4<br>5<br>6<br>结果为：<br>1 2 3 4 5 6<br>142536<br>123456<br>1<br>4</p>
<p>2<br>5</p>
<p>3<br>6</p>
<p>可是这并不是我们常见的矩阵啊，旁边的中括号呢？</p>
<p>别急，我们先把上面的公式说明一下：</p>
<p>\begin{matrix}和\end{matrix}说明在它们之间的是矩阵</p>
<p>1 &amp; 2 &amp; 3\表示第一行的元素，其中用&amp;来分割每一个元素，用\来换行</p>
<p>现在我们来加括号，很简单，语法如下：</p>
<p>$$<br>\left[\begin{matrix}<br>1 &amp; 2 &amp; 3\<br>4 &amp; 5 &amp; 6<br>\end{matrix}\right]<br>$$<br>1<br>2<br>3<br>4<br>5<br>6<br>结果为：<br>[ 1 2 3 4 5 6 ] \left[<br>142536<br>123456<br>\right]<br>[<br>1<br>4</p>
<p>2<br>5</p>
<p>3<br>6</p>
<p> ]</p>
<p>其实我们仅仅在\begin{matrix}前面加了\left[，在\end{matrix}后面加了\right]，这样就能正确显示括号了，那我们可以将[]改为||吗，当然可以，就简单地把\left[，\right]改为\left|和\right|即可。</p>
<p>$$<br>\left|\begin{matrix}<br>1 &amp; 2 &amp; 3\<br>4 &amp; 5 &amp; 6<br>\end{matrix}\right|<br>$$<br>1<br>2<br>3<br>4<br>5<br>6<br>结果就能显示为行列式了。<br>∣ 1 2 3 4 5 6 ∣ \left|<br>142536<br>123456<br>\right|<br>∣<br>∣<br>∣<br>∣</p>
<p>1<br>4</p>
<p>2<br>5</p>
<p>3<br>6</p>
<p>∣<br>∣<br>∣<br>∣</p>
<p>这里仅仅介绍简单的矩阵表示，如果要了解更多矩阵表示法，请自行搜索了解，网上的资料很多。</p>
<h3 id="3-13-方程组"><a href="#3-13-方程组" class="headerlink" title="3.13 方程组"></a>3.13 方程组</h3><p>$$<br>\begin{equation}<br>\left{<br>             \begin{array}{lr}<br>             x=\dfrac{3\pi}{2}(1+2t)\cos(\dfrac{3\pi}{2}(1+2t)), &amp;  \<br>             y=s, &amp; 0\leq s\leq L,|t|\leq1.\<br>             z=\dfrac{3\pi}{2}(1+2t)\sin(\dfrac{3\pi}{2}(1+2t)), &amp;<br>             \end{array}<br>\right.<br>\end{equation}<br>$$<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>结果如下：(CSDN不支持）<br>KaTeX parse error: No such environment: equation at position 8: \begin{̲e̲q̲u̲a̲t̲i̲o̲n̲}̲ \left{ …</p>
<p>现在我们一一来解释：</p>
<p>begin{equation}与\end{euqation}表示它们之间的为方程组。</p>
<p>\left{和\right.表示在方程组的左边加上{，在右边加上.，因为{在外联公式中有特殊的意义，因此需要在其前面加上转义字符\。</p>
<p>\begin{array}和\end{array}表示它们之间的是数组，其实这也可以用来表示矩阵。</p>
<p>{lr}表示有两列，第一列的值靠左排列，用l表示，第二列的值靠右排列，用r表示，如果是中间对齐则为c。</p>
<p>然后下面三行是方程式，用&amp;分割，用\换行。</p>
<h3 id="3-14-分段函数"><a href="#3-14-分段函数" class="headerlink" title="3.14 分段函数"></a>3.14 分段函数</h3><p>其实分段函数与方程组类似，示例如下：<br>$$<br>y=<br>\begin{equation}<br>    \left{<br>        \begin{array}{lr}<br>        x-1 &amp; x \leq 0<br>        x+1 &amp; x&gt;0<br>        \end{array}<br>    \right.<br>\end{equation}<br>$$<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>结果如下：（CSDN不支持）<br>KaTeX parse error: No such environment: equation at position 11: y= \begin{̲e̲q̲u̲a̲t̲i̲o̲n̲}̲ \left{ \be…<br>就是在\begin{equation}前加y=即可。</p>
<h1 id="四、Typora与HTML"><a href="#四、Typora与HTML" class="headerlink" title="四、Typora与HTML"></a>四、Typora与HTML</h1><h3 id="4-1-改变字体颜色及大小"><a href="#4-1-改变字体颜色及大小" class="headerlink" title="4.1 改变字体颜色及大小"></a>4.1 改变字体颜色及大小</h3><p>我们可以使用<font> </font>标签来改变字体的颜色及大小，如：</p>
<p><font size="3" color="red">字体颜色为红色，大小为3</font></p>
<p><font size="4" color="blue">字体颜色为蓝色，大小为4</font></p>
<p><font size="6" color="violet">字体颜色为紫罗兰，大小为6</font><br>1<br>2<br>3<br>4<br>5<br>结果为：</p>
<p>字体颜色为红色，大小为3</p>
<p>字体颜色为蓝色，大小为4</p>
<p>字体颜色为紫罗兰，大小为6</p>
<p>属性size表示字体大小，color表示颜色。</p>
<h3 id="4-2-改变对齐方式"><a href="#4-2-改变对齐方式" class="headerlink" title="4.2 改变对齐方式"></a>4.2 改变对齐方式</h3><p>我们可以改变字体的对齐方式，用标签</p><p> </p>加上属性align，如：<p></p>
<p>1 </p><p align="left">左对齐</p><br>2 <p align="center">中间对齐</p><br>3 <p align="right">右对齐</p><br>结果为：<p></p>
<p align="left">左对齐</p>
<p align="center">中间对齐</p>
<p align="right">右对齐</p>

<h3 id="4-3-插入图像"><a href="#4-3-插入图像" class="headerlink" title="4.3 插入图像"></a>4.3 插入图像</h3><p>因为CSDN不支持使用img标签修改图像，所以下面的结果都不是准确的。大家可以自己在Typora中测试。<br>我们可以通过标签<img src="url">来插入图片，如：</p>
<img src="img/1.jpg">
结果为：



<p><img src="/%E5%89%8D%E7%AB%AF%E7%BD%91%E9%A1%B5%E5%BC%80%E5%8F%91%E4%B9%8BTypora%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/%E6%9C%89%E5%BF%97%E8%80%85%EF%BC%8C%E4%BA%8B%E7%AB%9F%E6%88%90.png"></p>
<p>我们可以改变<img>标签的属性，来改变图片的大小。</p>
<img src="img/1.jpg" width="100" height="100/">
1
将图片的宽高均设为100



<p>也可以改变图片的位置，如：</p>
<p><img src="img/1.jpg" width="30" height="30" style="float:left">图片在左边<br><img src="img/1.jpg" width="30" height="30" style="float:right">图片在右边</p>
<h1 id="五、扩展用法"><a href="#五、扩展用法" class="headerlink" title="五、扩展用法"></a>五、扩展用法</h1><h3 id="5-1-插入emoji表情"><a href="#5-1-插入emoji表情" class="headerlink" title="5.1 插入emoji表情"></a>5.1 插入emoji表情</h3><p>我们可以使用:emoji:的语法来插入表情，比如：</p>
<p>:happy:的语法为:happy:</p>
<p>🦀的语法为<span class="github-emoji"><span>🦀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f980.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>
<p>🐴的语法为<span class="github-emoji"><span>🐴</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f434.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>
<h3 id="5-2-插入目录"><a href="#5-2-插入目录" class="headerlink" title="5.2 插入目录"></a>5.2 插入目录</h3><p>当我们为使用标题将文分章节后，可以在输入[toc]命令的地方自动根据标题生成目录。</p>
<h3 id="5-3-导出"><a href="#5-3-导出" class="headerlink" title="5.3 导出"></a>5.3 导出</h3><p>选择文件 –&gt; 导出，可以选择导出的文件格式，有pdf,html,word等格式。</p>
<h3 id="5-4-文本高亮"><a href="#5-4-文本高亮" class="headerlink" title="5.4 文本高亮"></a>5.4 文本高亮</h3><p>在Typora中，可以用一对==将要高亮的文本括起来，如：</p>
<p>==要高亮的文本==<br>==背景会用黄色填充==<br>1<br>2<br>结果为：</p>
<p>要高亮的文本<br>背景会用黄色填充</p>
<p>这个功能可在偏好设置 –&gt; Markdown扩展语法中设置。</p>
<h3 id="5-5-上下标"><a href="#5-5-上下标" class="headerlink" title="5.5 上下标"></a>5.5 上下标</h3><p>在Typora中，可以用一对<del>将下标括起来，如：H</del>2~O表示H2O</p>
<p>同样，我们也可以用一对^将上标括起来，如：X^2^表示X2</p>
<p>上下标可在偏好设置 –&gt; Markdown扩展语法中设置。</p>
<h1 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h1><p>[1] 菜鸟Markdown教程：<a href="https://www.runoob.com/markdown/md-tutorial.html">https://www.runoob.com/markdown/md-tutorial.html</a></p>
<p>[2] 更多数学符号表达式：<a href="http://mohu.org/info/symbols/symbols.htm">http://mohu.org/info/symbols/symbols.htm</a></p>
<p>[3] Latex 方程组表示： <a href="https://blog.csdn.net/lemolemac/article/details/9057471">https://blog.csdn.net/lemolemac/article/details/9057471</a></p>
<p>[4] 菜鸟HTML教程：<a href="https://www.runoob.com/html/html-tutorial.html">https://www.runoob.com/html/html-tutorial.html</a></p>
<h3 id="ps："><a href="#ps：" class="headerlink" title="ps："></a>ps：</h3><h3 id="资料参考于课本和讲解"><a href="#资料参考于课本和讲解" class="headerlink" title="资料参考于课本和讲解"></a>资料参考于课本和讲解</h3><h3 id="转载请注明出处https-lil-sum-github-io-，-感谢配合"><a href="#转载请注明出处https-lil-sum-github-io-，-感谢配合" class="headerlink" title="转载请注明出处https://lil-sum.github.io/， 感谢配合."></a>转载请注明出处<a href="https://lil-sum.github.io/%EF%BC%8C">https://lil-sum.github.io/，</a> 感谢配合.</h3>]]></content>
      <tags>
        <tag>工具浅玩类</tag>
      </tags>
  </entry>
  <entry>
    <title>浅玩vscode</title>
    <url>/2020/09/12/%E6%B5%85%E7%8E%A9vscode/</url>
    <content><![CDATA[<p>工欲善其事，必先利其器。想要优雅且高效的编写代码，必须熟练使用一款前端开发工具。</p>
<p>但前端开发工具数不胜数，像HBuilder、Sublime Text、WebStorm、Visual Studio Code……等等,</p>
<p>其中VSCode以其轻量且强大的代码编辑功能和丰富的插件生态系统，独受前端开发者的青睐。</p>
<p>活不多说，开启教程：</p>
<hr>
<h3 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h3><h3 id="直接在官网进行下载"><a href="#直接在官网进行下载" class="headerlink" title="直接在官网进行下载"></a>直接在官网进行下载</h3><p>Visual Studio Code - Code Editing. Redefined<br>​code.visualstudio.com/</p>
<h3 id="可以将vscode设置成中文"><a href="#可以将vscode设置成中文" class="headerlink" title="可以将vscode设置成中文"></a>可以将vscode设置成中文</h3><p>vscode默认的语言是英文，对于英文不好的小伙伴可能不太友好。<br>简单几步教大家如何将vscode设置成中文。</p>
<p>按快捷键“Ctrl+Shift+P”。<br>在“vscode”顶部会出现一个搜索框。<br>输入“configure language”，然后回车。<br>“vscode”里面就会打开一个语言配置文件。<br>将“en-us”修改成“zh-cn”。<br>按“Ctrl+S”保存设置。<br>关闭“vscode”，再次打开就可以看到中文界面了。<br>当然如果你不愿意设置，也可以直接安装它的中文插件，还是很人性化的。</p>
<h3 id="VScode用户设置"><a href="#VScode用户设置" class="headerlink" title="VScode用户设置"></a>VScode用户设置</h3><ol>
<li>打开设置</li>
</ol>
<p>文件–首选项–设置，打开用户设置。VScode支持选择配置，也支持编辑setting.json文件修改默认配置。个人更倾向于编写json的方式进行配置，下面会附上我个人的配置代码</p>
<p>这里解析几个常用配置项：</p>
<p>（1）editor.fontsize用来设置字体大小，可以设置editor.fontsize : 14;</p>
<p>（2）files.autoSave这个属性是表示文件是否进行自动保存，推荐设置为onFocusChange——文件焦点变化时自动保存。</p>
<p>（3）editor.tabCompletion用来在出现推荐值时，按下Tab键是否自动填入最佳推荐值，推荐设置为on;</p>
<p>（4）editor.codeActionsOnSave中的source.organizeImports属性，这个属性能够在保存时，自动调整 import 语句相关顺序，能够让你的 import 语句按照字母顺序进行排列，推荐设置为true,即”editor.codeActionsOnSave”: { “source.organizeImports”: true }；</p>
<p>（5）editor.lineNumbers设置代码行号,即editor.lineNumbers ：true；</p>
<p>我的个人配置，供参考：</p>
<p>{<br>  “files.associations”: {<br>  “<em>.vue”: “vue”,<br>  “</em>.wpy”: “vue”,<br>  “<em>.wxml”: “html”,<br>  “</em>.wxss”: “css”<br>  },<br>  “terminal.integrated.shell.windows”: “C:\Windows\System32\cmd.exe”,<br>  “git.enableSmartCommit”: true,<br>  “git.autofetch”: true,<br>  “emmet.triggerExpansionOnTab”: true,<br>  “emmet.showAbbreviationSuggestions”: true,<br>  “emmet.showExpandedAbbreviation”: “always”,<br>  “emmet.includeLanguages”: {<br>  “vue-html”: “html”,<br>  “vue”: “html”,<br>  “wpy”: “html”<br>  },<br>  //主题颜色<br>  //“workbench.colorTheme”: “Monokai”,<br>  “git.confirmSync”: false,<br>  “explorer.confirmDelete”: false,<br>  “editor.fontSize”: 14,<br>  “window.zoomLevel”: 1,<br>  “editor.wordWrap”: “on”,<br>  “editor.detectIndentation”: false,<br>  // 重新设定tabsize<br>  “editor.tabSize”: 2,<br>  //失去焦点后自动保存<br>  “files.autoSave”: “onFocusChange”,<br>  // #值设置为true时，每次保存的时候自动格式化；<br>  “editor.formatOnSave”: false,<br>   //每120行就显示一条线<br>  “editor.rulers”: [<br>  ],<br>  // 在使用搜索功能时，将这些文件夹/文件排除在外<br>  “search.exclude”: {<br>      “<strong>/node_modules”: true,<br>      “</strong>/bower_components”: true,<br>      “<strong>/target”: true,<br>      “</strong>/logs”: true,<br>  },<br>  // 这些文件将不会显示在工作空间中<br>  “files.exclude”: {<br>      “<strong>/.git”: true,<br>      “</strong>/.svn”: true,<br>      “<strong>/.hg”: true,<br>      “</strong>/CVS”: true,<br>      “<strong>/.DS_Store”: true,<br>      “</strong>/*.js”: {<br>          “when”: “$(basename).ts” //ts编译后生成的js文件将不会显示在工作空中<br>      },<br>      “**/node_modules”: true<br>  },<br>  // #让vue中的js按”prettier”格式进行格式化<br>  “vetur.format.defaultFormatter.html”: “js-beautify-html”,<br>  “vetur.format.defaultFormatter.js”: “prettier”,<br>  “vetur.format.defaultFormatterOptions”: {<br>      “js-beautify-html”: {<br>          // #vue组件中html代码格式化样式<br>          “wrap_attributes”: “force-aligned”, //也可以设置为“auto”，效果会不一样<br>          “wrap_line_length”: 200,<br>          “end_with_newline”: false,<br>          “semi”: false,<br>          “singleQuote”: true<br>      },<br>      “prettier”: {<br>          “semi”: false,<br>          “singleQuote”: true<br>      }<br>  }<br>}</p>
<p>新版的vscode设置默认为UI的设置，而非之前的json设置。如果你想复制我上面这段代码进行配置，可以进行下面的修改</p>
<p>文件&gt;首选项&gt;设置 &gt; 搜索workbench.settings.editor，选中json即可改成json设置；</p>
<h3 id="禁用自动更新"><a href="#禁用自动更新" class="headerlink" title="禁用自动更新"></a>禁用自动更新</h3><p>文件 &gt; 首选项 &gt; 设置（macOS：代码 &gt; 首选项 &gt; 设置，搜索update mode并将设置更改为none。</p>
<p>开启代码提示设置</p>
<p>第一步：点击左下角点击设置图标，找到并点击“setting”</p>
<p>第二步：到搜索框里搜索“prevent”—&gt;并取消此项的勾选</p>
<p>常用的快捷键<br>高效的使用vscode,记住一些常用的快捷键是必不可少的，我给大家罗列了一些日常工作过程中用的多的快捷键。</p>
<p>以下以Windows为主，windows的 Ctrl，mac下换成Command就行了</p>
<p>对于 行 的操作：</p>
<p>重开一行：光标在行尾的话，回车即可；不在行尾，ctrl + enter 向下重开一行；ctrl+shift + enter 则是在上一行重开一行<br>删除一行：光标没有选择内容时，ctrl + x 剪切一行；ctrl +shift + k 直接删除一行<br>移动一行：alt + ↑ 向上移动一行；alt + ↓ 向下移动一行<br>复制一行：shift + alt + ↓ 向下复制一行；shift + alt + ↑ 向上复制一行<br>ctrl + z 回退<br>对于 词 的操作：</p>
<p>选中一个词：ctrl + d<br>搜索或者替换：</p>
<p>ctrl + f ：搜索<br>ctrl + alt + f： 替换<br>ctrl + shift + f：在项目内搜索<br>通过Ctrl + ` 可以打开或关闭终端</p>
<p>Ctrl+P 快速打开最近打开的文件</p>
<p>Ctrl+Shift+N 打开新的编辑器窗口</p>
<p>Ctrl+Shift+W 关闭编辑器</p>
<p>Home 光标跳转到行头</p>
<p>End 光标跳转到行尾</p>
<p>Ctrl + Home 跳转到页头</p>
<p>Ctrl + End 跳转到页尾</p>
<p>Ctrl + Shift + [ 折叠区域代码</p>
<p>Ctrl + Shift + ] 展开区域代码</p>
<p>Ctrl + / 添加关闭行注释</p>
<p>Shift + Alt +A 块区域注释</p>
<h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><p>在输入框中输入想要安装的插件名称，点击安装即可。安装后没有效果，可以重启vscode</p>
<h4 id="必备插件"><a href="#必备插件" class="headerlink" title="必备插件"></a>必备插件</h4><p>1、View In Browser</p>
<p>在浏览器里预览网页必备。运行html文件</p>
<p>动图封面<br>2、vscode-icons<br>改变编辑器里面的文件图标</p>
<p>3、Bracket Pair Colorizer<br>给嵌套的各种括号加上不同的颜色。</p>
<p>4、Auto Rename Tag<br>自动修改匹配的 HTML 标签。</p>
<p>动图封面<br>5、Path Intellisense<br>智能路径提示，可以在你输入文件路径时智能提示。</p>
<p>动图封面<br>6、Markdown Preview<br>实时预览 markdown。</p>
<p>7、stylelint<br>CSS / SCSS / Less 语法检查</p>
<p>8、Import Cost<br>引入包大小计算,对于项目打包后体积掌握很有帮助</p>
<p>动图封面<br>9、Prettier<br>比Beautify更好用的代码格式化插件<br>Vue插件<br>vetur<br>语法高亮、智能感知、Emmet等</p>
<p>VueHelper<br>snippet代码片段</p>
<p>动图封面</p>
<h4 id="其它插件"><a href="#其它插件" class="headerlink" title="其它插件"></a>其它插件</h4><p>1、CSScomb</p>
<p>CSS 书写顺序规则，这里我推荐腾讯 AollyTeam 团队的规范：</p>
<p><a href="http://alloyteam.github.io/CodeGuide/#css-declaration-order">http://alloyteam.github.io/CodeGuide/#css-declaration-order</a><br>​alloyteam.github.io/CodeGuide/#css-declaration-order<br>简单说下这个插件怎么用：</p>
<p>在项目的根目录下创建一个名为csscomb.json的文件，然后添加一些配置项。也可以将配置项写入项目的 package.json 文件中的 csscombConfig 字段。</p>
<p>至于添加的配置项，CSScomb 提供了示例配置文件：</p>
<p><a href="https://github.com/csscomb/csscomb.js/blob/master/config/csscomb.json">https://github.com/csscomb/csscomb.js/blob/master/config/csscomb.json</a><br>​github.com/csscomb/csscomb.js/blob/master/config/csscomb.json<br>其中的 sort-order 就是 CSS 属性书写顺序，可以按照自己遵循的规范设置，所以我直接替换成了腾讯的。</p>
<p>这个配置文件里面各个字段的作用可以戳这里查看：</p>
<p>csscomb/csscomb.js<br>​github.com/csscomb/csscomb.js/blob/master/doc/options.md<br>2、Turbo Console Log</p>
<p>快捷添加 console.log，一键 注释 / 启用 / 删除 所有 console.log。这也是我最常用的一个插件</p>
<p>动图封面<br>简单说下这个插件要用到的快捷键:</p>
<p>ctrl + alt + l 选中变量之后，使用这个快捷键生成 console.log<br>alt + shift + c 注释所有 console.log<br>alt + shift + u 启用所有 console.log<br>alt + shift + d 删除所有 console.log<br>3、GitLens</p>
<p>详细的 Git 提交日志。</p>
<p>Git 重度使用者必备，尤其是多人协作时：哪一行代码，何时、何人提交都有记录。</p>
<p>妈妈再也不用担心我背锅了！</p>
<p>4、css-auto-prefix<br>自动添加 CSS 私有前缀。</p>
<p>动图封面<br>5、change-case<br>转换命名风格。</p>
<p>动图封面<br>6、CSS Peek</p>
<p>定位 CSS 类名。</p>
<p>动图封面<br>7、vscode-json</p>
<p>处理 JSON 文件，用法看图：</p>
<p>动图封面<br>8、Regex Previewer<br>实时预览正则表达式的效果。</p>
<p>动图封面</p>
<h3 id="设置同步"><a href="#设置同步" class="headerlink" title="设置同步"></a>设置同步</h3><p>花了一天终于把vscode配置成自己满意的样子，如果每换一次电脑就要重新来一次，大家一定会手撕了我。放心，早就帮大家准备好了。Settings Sync，在不同电脑间同步你的插件。</p>
<p>首先要想在不同的设备间同步你的插件, 需要用到 Token 和Gist id</p>
<p>Token 就是你把插件上传到 github 上时, 让你保存的那段字符，Gist id 在你上传插件的那台电脑上保存着。</p>
<p>先给大家来三个快捷键，后面会用到</p>
<p>1、CTRL+SHIFT+P 我也不知道叫什么，暂且就叫它功能搜索功能吧<br>2、ALT+SHIFT+D 下载配置<br>3、ALT+SHIFT+U 上传配置<br>现在手把手教大家配置：</p>
<p>1、安装Settings Sync<br>2、登陆Github&gt;settings&gt;Developer settings&gt;personal access tokens&gt;generate new token，输入名称，勾选Gist，提交</p>
<p>3、保存Github Access Token<br>4、打开vscode，Ctrl+Shift+P打开命令框–&gt;输入sync–&gt;选择高级设置–&gt;编辑本地扩展设置–&gt;编辑token</p>
<p>5、Ctrl+Shift+P打开命令框–&gt;输入sync–&gt;找到update/upload settings，上传成功后会返回Gist ID，保存此Gist ID.</p>
<p>动图封面<br>6、在 VSCode 里，依次打开: 文件 -&gt; 首选项 -&gt; 设置，然后输入 Sync 进行搜索:能找到你gist id</p>
<p>7、若需在其他机器上DownLoad插件的话，同样，Ctrl+Shift+P打开命令框，输入sync，找到Download settings，会跳转到Github的Token编辑界面，点Edit，regenerate token，保存新生成的token，在vscode命令框中输入此Token，回车，再输入之前的Gist ID，即可同步插件和设置</p>
<h3 id="开启本地服务"><a href="#开启本地服务" class="headerlink" title="开启本地服务"></a>开启本地服务</h3><h4 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h4><p>1.安装Debugger for Chrome插件</p>
<p>2.使用ctrl+`快捷键打开终端，然后输入npm install -g live-server</p>
<p>3.在命令行里输入 live-server即可</p>
<h4 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h4><p>在写前端页面中，经常会在浏览器运行HTML页面，从本地文件夹中直接打开的一般都是file协议，当代码中存在http或https的链接时，HTML页面就无法正常打开，为了解决这种情况，需要在在本地开启一个本地的服务器。 本文是利用node.js中的http-server，开启本地服务，步骤如下：</p>
<p>1.安装http-server</p>
<p>在终端输入： $ npm install http-server -g</p>
<p>2.开启 http-server服务</p>
<p>终端进入目标文件夹，然后在终端输入：</p>
<p>$ http-server -c-1   （⚠️只输入http-server的话，更新了代码后，页面不会同步更新）<br>Starting up http-server, serving ./<br>Available on:<br>  <a href="http://127.0.0.1:8080/">http://127.0.0.1:8080</a><br>  <a href="http://192.168.8.196:8080/">http://192.168.8.196:8080</a><br>Hit CTRL-C to stop the server<br>3.关闭 http-server服务</p>
<p>按快捷键CTRL-C 终端显示^Chttp-server stopped.即关闭服务成功。</p>
<h3 id="ps："><a href="#ps：" class="headerlink" title="ps："></a>ps：</h3><h3 id="资料参考于课本和讲解"><a href="#资料参考于课本和讲解" class="headerlink" title="资料参考于课本和讲解"></a>资料参考于课本和讲解</h3><h3 id="转载请注明出处https-lil-sum-github-io-，-感谢配合"><a href="#转载请注明出处https-lil-sum-github-io-，-感谢配合" class="headerlink" title="转载请注明出处https://lil-sum.github.io/， 感谢配合."></a>转载请注明出处<a href="https://lil-sum.github.io/%EF%BC%8C">https://lil-sum.github.io/，</a> 感谢配合.</h3>]]></content>
      <tags>
        <tag>工具浅玩类</tag>
      </tags>
  </entry>
</search>
