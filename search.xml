<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>github注册教程</title>
    <url>/2022/07/17/github%E6%B3%A8%E5%86%8C%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>前言：<br>GitHub 是一个面向开源及私有软件项目的托管平台，因为只支持 Git 作为唯一的版本库格式进行托管，故名 GitHub。<br>GitHub 于 2008 年 4 月 10 日正式上线，除了 Git 代码仓库托管及基本的 Web 管理界面以外，还提供了订阅、讨论组、文本渲染、在线文件编辑器、协作图谱（报表）、代码片段分享（Gist）等功能。</p>
<p>想要成为一个合格的程序员必须要掌握 GitHub 的用法！</p>
<p>由于github是半墙状态，有条件的可以开ssh，科学上网<br>优先推荐使用chrome（谷歌浏览器）或者微软edge浏览器</p>
<p>一、注册github流程<br>1.首先进入github官网 <a href="https://github.com/">https://github.com/</a></p>
<p><img src="/2022/07/17/github%E6%B3%A8%E5%86%8C%E6%95%99%E7%A8%8B/1.png"></p>
<p>2.点击绿色框Sign up for GitHub进行注册<br>注意：<br>Sign in，登录<br>Sign up，注册</p>
<p><img src="/2022/07/17/github%E6%B3%A8%E5%86%8C%E6%95%99%E7%A8%8B/2.png"></p>
<p>3.注册页面第一栏email（邮箱），第二栏password（密码），第三栏username（用户名）进行验证后即可完成注册</p>
<p>愉快地开启github之旅吧！哈哈</p>
]]></content>
      <tags>
        <tag>教程类</tag>
      </tags>
  </entry>
  <entry>
    <title>关于树的定义</title>
    <url>/2022/03/06/%E5%85%B3%E4%BA%8E%E6%A0%91%E7%9A%84%E5%AE%9A%E4%B9%89/</url>
    <content><![CDATA[<h2 id="二叉树的种类"><a href="#二叉树的种类" class="headerlink" title="二叉树的种类"></a>二叉树的种类</h2><h2 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h2><p>满二叉树：<br>如果一棵二叉树只有度为0的结点和度为2的结点，并且度为0的结点在同一层上，则这棵二叉树为满二叉树。深度为k，有2^k-1个节点的二叉树。</p>
<hr>
<h2 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h2><h2 id="完全二叉树的定义如下：在完全二叉树中，除了最底层节点可能没填满外，其余每层节点数都达到最大值，并且最下面一层的节点都集中在该层最左边的若干位置。若最底层为第-h-层，则该层包含-1-2-h-1-个节点。"><a href="#完全二叉树的定义如下：在完全二叉树中，除了最底层节点可能没填满外，其余每层节点数都达到最大值，并且最下面一层的节点都集中在该层最左边的若干位置。若最底层为第-h-层，则该层包含-1-2-h-1-个节点。" class="headerlink" title="完全二叉树的定义如下：在完全二叉树中，除了最底层节点可能没填满外，其余每层节点数都达到最大值，并且最下面一层的节点都集中在该层最左边的若干位置。若最底层为第 h 层，则该层包含 1~ 2^h -1 个节点。"></a>完全二叉树的定义如下：在完全二叉树中，除了最底层节点可能没填满外，其余每层节点数都达到最大值，并且最下面一层的节点都集中在该层最左边的若干位置。若最底层为第 h 层，则该层包含 1~ 2^h -1 个节点。</h2><p>我们可以给完全二叉树编号，这样父子之间就可以通过编号轻松求出。<br>比如我给所有节点从左到右从上到下依次从 1 开始编号。<br>那么已知一个节点的编号是 i，那么其左子节点就是 2 i，右子节点就是 2 1 + 1，父节点就是 (i + 1) / 2。<br>–<br>二叉树最大宽度</p>
<hr>
<h2 id="序列化二叉树"><a href="#序列化二叉树" class="headerlink" title="序列化二叉树"></a>序列化二叉树</h2><p>二叉搜索树<br>二叉搜索树是有数值的了，二叉搜索树是一个有序树。</p>
<hr>
<p>若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值；<br>若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值；<br>它的左、右子树也分别为二叉排序树</p>
<hr>
<p>平衡二叉搜索树<br>平衡二叉搜索树：又被称为AVL（Adelson-Velsky and Landis）树，且具有以下性质：</p>
<hr>
<p>它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。<br>对于一个二叉查找树，常规操作有插入，查找，删除，找父节点，求最大值，求最小值。<br>核心：二叉搜索树的中序遍历的结果是一个有序数组</p>
<hr>
<h2 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h2><p>验证二叉搜索树</p>
<h2 id="二叉搜索树迭代器"><a href="#二叉搜索树迭代器" class="headerlink" title="二叉搜索树迭代器"></a>二叉搜索树迭代器</h2><p>二叉树的遍历</p>
<p>一个中心</p>
<p>树的遍历</p>
<h2 id="遍历不是目的，遍历是为了更好地做处理，这里的处理包括搜索，修改树等。树虽然只能从根开始访问，但是可以选择在访问完毕回来的时候做处理，还是在访问回来之前做处理，这两种不同的方式就是后序遍历和先序遍历。"><a href="#遍历不是目的，遍历是为了更好地做处理，这里的处理包括搜索，修改树等。树虽然只能从根开始访问，但是可以选择在访问完毕回来的时候做处理，还是在访问回来之前做处理，这两种不同的方式就是后序遍历和先序遍历。" class="headerlink" title="遍历不是目的，遍历是为了更好地做处理，这里的处理包括搜索，修改树等。树虽然只能从根开始访问，但是可以选择在访问完毕回来的时候做处理，还是在访问回来之前做处理，这两种不同的方式就是后序遍历和先序遍历。"></a>遍历不是目的，遍历是为了更好地做处理，这里的处理包括搜索，修改树等。树虽然只能从根开始访问，但是可以选择在访问完毕回来的时候做处理，还是在访问回来之前做处理，这两种不同的方式就是后序遍历和先序遍历。</h2><p>两个基本点</p>
<p>DFS（深度优先遍历）</p>
<p>BFS（宽度优先遍历）</p>
<p>看完本篇还不懂的，可以善用搜索，找找度娘查查咯，冲冲冲！</p>
]]></content>
      <tags>
        <tag>术语定义类</tag>
      </tags>
  </entry>
  <entry>
    <title>浅玩vscode</title>
    <url>/2022/04/12/%E6%B5%85%E7%8E%A9vscode/</url>
    <content><![CDATA[<p>工欲善其事，必先利其器。想要优雅且高效的编写代码，必须熟练使用一款前端开发工具。但前端开发工具数不胜数，像HBuilder、Sublime Text、WebStorm、Visual Studio Code……等等,其中VSCode以其轻量且强大的代码编辑功能和丰富的插件生态系统，独受前端工师的青睐。活不多说，开启教程</p>
<hr>
<p>软件下载<br>直接在官网进行下载</p>
<p>Visual Studio Code - Code Editing. Redefined<br>​code.visualstudio.com/</p>
<p>首页</p>
<p>vscode设置成中文</p>
<p>vscode默认的语言是英文，对于英文不好的小伙伴可能不太友好。<br>简单几步教大家如何将vscode设置成中文。</p>
<p>按快捷键“Ctrl+Shift+P”。<br>在“vscode”顶部会出现一个搜索框。<br>输入“configure language”，然后回车。<br>“vscode”里面就会打开一个语言配置文件。<br>将“en-us”修改成“zh-cn”。<br>按“Ctrl+S”保存设置。<br>关闭“vscode”，再次打开就可以看到中文界面了。<br>当然如果你不愿意设置，也可以直接安装它的中文插件，还是很人性化的。</p>
<p>VScode用户设置</p>
<ol>
<li>打开设置</li>
</ol>
<p>文件–首选项–设置，打开用户设置。VScode支持选择配置，也支持编辑setting.json文件修改默认配置。个人更倾向于编写json的方式进行配置，下面会附上我个人的配置代码</p>
<p>这里解析几个常用配置项：</p>
<p>（1）editor.fontsize用来设置字体大小，可以设置editor.fontsize : 14;</p>
<p>（2）files.autoSave这个属性是表示文件是否进行自动保存，推荐设置为onFocusChange——文件焦点变化时自动保存。</p>
<p>（3）editor.tabCompletion用来在出现推荐值时，按下Tab键是否自动填入最佳推荐值，推荐设置为on;</p>
<p>（4）editor.codeActionsOnSave中的source.organizeImports属性，这个属性能够在保存时，自动调整 import 语句相关顺序，能够让你的 import 语句按照字母顺序进行排列，推荐设置为true,即”editor.codeActionsOnSave”: { “source.organizeImports”: true }；</p>
<p>（5）editor.lineNumbers设置代码行号,即editor.lineNumbers ：true；</p>
<p>我的个人配置，供参考：</p>
<p>{<br>  “files.associations”: {<br>  “<em>.vue”: “vue”,<br>  “</em>.wpy”: “vue”,<br>  “<em>.wxml”: “html”,<br>  “</em>.wxss”: “css”<br>  },<br>  “terminal.integrated.shell.windows”: “C:\Windows\System32\cmd.exe”,<br>  “git.enableSmartCommit”: true,<br>  “git.autofetch”: true,<br>  “emmet.triggerExpansionOnTab”: true,<br>  “emmet.showAbbreviationSuggestions”: true,<br>  “emmet.showExpandedAbbreviation”: “always”,<br>  “emmet.includeLanguages”: {<br>  “vue-html”: “html”,<br>  “vue”: “html”,<br>  “wpy”: “html”<br>  },<br>  //主题颜色<br>  //“workbench.colorTheme”: “Monokai”,<br>  “git.confirmSync”: false,<br>  “explorer.confirmDelete”: false,<br>  “editor.fontSize”: 14,<br>  “window.zoomLevel”: 1,<br>  “editor.wordWrap”: “on”,<br>  “editor.detectIndentation”: false,<br>  // 重新设定tabsize<br>  “editor.tabSize”: 2,<br>  //失去焦点后自动保存<br>  “files.autoSave”: “onFocusChange”,<br>  // #值设置为true时，每次保存的时候自动格式化；<br>  “editor.formatOnSave”: false,<br>   //每120行就显示一条线<br>  “editor.rulers”: [<br>  ],<br>  // 在使用搜索功能时，将这些文件夹/文件排除在外<br>  “search.exclude”: {<br>      “<strong>/node_modules”: true,<br>      “</strong>/bower_components”: true,<br>      “<strong>/target”: true,<br>      “</strong>/logs”: true,<br>  },<br>  // 这些文件将不会显示在工作空间中<br>  “files.exclude”: {<br>      “<strong>/.git”: true,<br>      “</strong>/.svn”: true,<br>      “<strong>/.hg”: true,<br>      “</strong>/CVS”: true,<br>      “<strong>/.DS_Store”: true,<br>      “</strong>/*.js”: {<br>          “when”: “$(basename).ts” //ts编译后生成的js文件将不会显示在工作空中<br>      },<br>      “**/node_modules”: true<br>  },<br>  // #让vue中的js按”prettier”格式进行格式化<br>  “vetur.format.defaultFormatter.html”: “js-beautify-html”,<br>  “vetur.format.defaultFormatter.js”: “prettier”,<br>  “vetur.format.defaultFormatterOptions”: {<br>      “js-beautify-html”: {<br>          // #vue组件中html代码格式化样式<br>          “wrap_attributes”: “force-aligned”, //也可以设置为“auto”，效果会不一样<br>          “wrap_line_length”: 200,<br>          “end_with_newline”: false,<br>          “semi”: false,<br>          “singleQuote”: true<br>      },<br>      “prettier”: {<br>          “semi”: false,<br>          “singleQuote”: true<br>      }<br>  }<br>}</p>
<p>新版的vscode设置默认为UI的设置，而非之前的json设置。如果你想复制我上面这段代码进行配置，可以进行下面的修改</p>
<p>文件&gt;首选项&gt;设置 &gt; 搜索workbench.settings.editor，选中json即可改成json设置；</p>
<p>禁用自动更新</p>
<p>文件 &gt; 首选项 &gt; 设置（macOS：代码 &gt; 首选项 &gt; 设置，搜索update mode并将设置更改为none。</p>
<p>开启代码提示设置</p>
<p>第一步：点击左下角点击设置图标，找到并点击“setting”</p>
<p>第二步：到搜索框里搜索“prevent”—&gt;并取消此项的勾选</p>
<p>常用的快捷键<br>高效的使用vscode,记住一些常用的快捷键是必不可少的，我给大家罗列了一些日常工作过程中用的多的快捷键。</p>
<p>以下以Windows为主，windows的 Ctrl，mac下换成Command就行了</p>
<p>对于 行 的操作：</p>
<p>重开一行：光标在行尾的话，回车即可；不在行尾，ctrl + enter 向下重开一行；ctrl+shift + enter 则是在上一行重开一行<br>删除一行：光标没有选择内容时，ctrl + x 剪切一行；ctrl +shift + k 直接删除一行<br>移动一行：alt + ↑ 向上移动一行；alt + ↓ 向下移动一行<br>复制一行：shift + alt + ↓ 向下复制一行；shift + alt + ↑ 向上复制一行<br>ctrl + z 回退<br>对于 词 的操作：</p>
<p>选中一个词：ctrl + d<br>搜索或者替换：</p>
<p>ctrl + f ：搜索<br>ctrl + alt + f： 替换<br>ctrl + shift + f：在项目内搜索<br>通过Ctrl + ` 可以打开或关闭终端</p>
<p>Ctrl+P 快速打开最近打开的文件</p>
<p>Ctrl+Shift+N 打开新的编辑器窗口</p>
<p>Ctrl+Shift+W 关闭编辑器</p>
<p>Home 光标跳转到行头</p>
<p>End 光标跳转到行尾</p>
<p>Ctrl + Home 跳转到页头</p>
<p>Ctrl + End 跳转到页尾</p>
<p>Ctrl + Shift + [ 折叠区域代码</p>
<p>Ctrl + Shift + ] 展开区域代码</p>
<p>Ctrl + / 添加关闭行注释</p>
<p>Shift + Alt +A 块区域注释</p>
<p>插件安装<br>在输入框中输入想要安装的插件名称，点击安装即可。安装后没有效果，可以重启vscode</p>
<p>必备插件</p>
<p>1、View In Browser</p>
<p>在浏览器里预览网页必备。运行html文件</p>
<p>动图封面<br>2、vscode-icons<br>改变编辑器里面的文件图标</p>
<p>3、Bracket Pair Colorizer<br>给嵌套的各种括号加上不同的颜色。</p>
<p>4、Auto Rename Tag<br>自动修改匹配的 HTML 标签。</p>
<p>动图封面<br>5、Path Intellisense<br>智能路径提示，可以在你输入文件路径时智能提示。</p>
<p>动图封面<br>6、Markdown Preview<br>实时预览 markdown。</p>
<p>7、stylelint<br>CSS / SCSS / Less 语法检查</p>
<p>8、Import Cost<br>引入包大小计算,对于项目打包后体积掌握很有帮助</p>
<p>动图封面<br>9、Prettier<br>比Beautify更好用的代码格式化插件<br>Vue插件<br>vetur<br>语法高亮、智能感知、Emmet等</p>
<p>VueHelper<br>snippet代码片段</p>
<p>动图封面<br>其它插件<br>1、CSScomb</p>
<p>CSS 书写顺序规则，这里我推荐腾讯 AollyTeam 团队的规范：</p>
<p><a href="http://alloyteam.github.io/CodeGuide/#css-declaration-order">http://alloyteam.github.io/CodeGuide/#css-declaration-order</a><br>​alloyteam.github.io/CodeGuide/#css-declaration-order<br>简单说下这个插件怎么用：</p>
<p>在项目的根目录下创建一个名为csscomb.json的文件，然后添加一些配置项。也可以将配置项写入项目的 package.json 文件中的 csscombConfig 字段。</p>
<p>至于添加的配置项，CSScomb 提供了示例配置文件：</p>
<p><a href="https://github.com/csscomb/csscomb.js/blob/master/config/csscomb.json">https://github.com/csscomb/csscomb.js/blob/master/config/csscomb.json</a><br>​github.com/csscomb/csscomb.js/blob/master/config/csscomb.json<br>其中的 sort-order 就是 CSS 属性书写顺序，可以按照自己遵循的规范设置，所以我直接替换成了腾讯的。</p>
<p>这个配置文件里面各个字段的作用可以戳这里查看：</p>
<p>csscomb/csscomb.js<br>​github.com/csscomb/csscomb.js/blob/master/doc/options.md<br>2、Turbo Console Log</p>
<p>快捷添加 console.log，一键 注释 / 启用 / 删除 所有 console.log。这也是我最常用的一个插件</p>
<p>动图封面<br>简单说下这个插件要用到的快捷键:</p>
<p>ctrl + alt + l 选中变量之后，使用这个快捷键生成 console.log<br>alt + shift + c 注释所有 console.log<br>alt + shift + u 启用所有 console.log<br>alt + shift + d 删除所有 console.log<br>3、GitLens</p>
<p>详细的 Git 提交日志。</p>
<p>Git 重度使用者必备，尤其是多人协作时：哪一行代码，何时、何人提交都有记录。</p>
<p>妈妈再也不用担心我背锅了！</p>
<p>4、css-auto-prefix<br>自动添加 CSS 私有前缀。</p>
<p>动图封面<br>5、change-case<br>转换命名风格。</p>
<p>动图封面<br>6、CSS Peek</p>
<p>定位 CSS 类名。</p>
<p>动图封面<br>7、vscode-json</p>
<p>处理 JSON 文件，用法看图：</p>
<p>动图封面<br>8、Regex Previewer<br>实时预览正则表达式的效果。</p>
<p>动图封面</p>
<p>设置同步<br>花了一天终于把vscode配置成自己满意的样子，如果每换一次电脑就要重新来一次，大家一定会手撕了我。放心，早就帮大家准备好了。Settings Sync，在不同电脑间同步你的插件。</p>
<p>首先要想在不同的设备间同步你的插件, 需要用到 Token 和Gist id</p>
<p>Token 就是你把插件上传到 github 上时, 让你保存的那段字符，Gist id 在你上传插件的那台电脑上保存着。</p>
<p>先给大家来三个快捷键，后面会用到</p>
<p>1、CTRL+SHIFT+P 我也不知道叫什么，暂且就叫它功能搜索功能吧<br>2、ALT+SHIFT+D 下载配置<br>3、ALT+SHIFT+U 上传配置<br>现在手把手教大家配置：</p>
<p>1、安装Settings Sync<br>2、登陆Github&gt;settings&gt;Developer settings&gt;personal access tokens&gt;generate new token，输入名称，勾选Gist，提交</p>
<p>3、保存Github Access Token<br>4、打开vscode，Ctrl+Shift+P打开命令框–&gt;输入sync–&gt;选择高级设置–&gt;编辑本地扩展设置–&gt;编辑token</p>
<p>5、Ctrl+Shift+P打开命令框–&gt;输入sync–&gt;找到update/upload settings，上传成功后会返回Gist ID，保存此Gist ID.</p>
<p>动图封面<br>6、在 VSCode 里，依次打开: 文件 -&gt; 首选项 -&gt; 设置，然后输入 Sync 进行搜索:能找到你gist id</p>
<p>7、若需在其他机器上DownLoad插件的话，同样，Ctrl+Shift+P打开命令框，输入sync，找到Download settings，会跳转到Github的Token编辑界面，点Edit，regenerate token，保存新生成的token，在vscode命令框中输入此Token，回车，再输入之前的Gist ID，即可同步插件和设置</p>
<p>开启一个本地服务<br>第一种方式</p>
<p>1.安装Debugger for Chrome插件</p>
<p>2.使用ctrl+`快捷键打开终端，然后输入npm install -g live-server</p>
<p>3.在命令行里输入 live-server即可</p>
<p>第二种方式</p>
<p>在写前端页面中，经常会在浏览器运行HTML页面，从本地文件夹中直接打开的一般都是file协议，当代码中存在http或https的链接时，HTML页面就无法正常打开，为了解决这种情况，需要在在本地开启一个本地的服务器。 本文是利用node.js中的http-server，开启本地服务，步骤如下：</p>
<p>1.安装http-server</p>
<p>在终端输入： $ npm install http-server -g</p>
<p>2.开启 http-server服务</p>
<p>终端进入目标文件夹，然后在终端输入：</p>
<p>$ http-server -c-1   （⚠️只输入http-server的话，更新了代码后，页面不会同步更新）<br>Starting up http-server, serving ./<br>Available on:<br>  <a href="http://127.0.0.1:8080/">http://127.0.0.1:8080</a><br>  <a href="http://192.168.8.196:8080/">http://192.168.8.196:8080</a><br>Hit CTRL-C to stop the server<br>3.关闭 http-server服务</p>
<p>按快捷键CTRL-C 终端显示^Chttp-server stopped.即关闭服务成功。</p>
<p>愉快地开启vscode，书写你的人生吧，哈哈！</p>
]]></content>
      <tags>
        <tag>工具浅玩类</tag>
      </tags>
  </entry>
</search>
